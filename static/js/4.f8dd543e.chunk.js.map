{"version":3,"sources":["../../../src/hooks/useAutoResize.ts","../../../../src/components/TextArea/TextArea.styles.ts","../../../../src/components/TextArea/TextArea.tsx","fields/TextArea.tsx"],"names":["maxHeight","minHeightProp","element","minHeight","setMinHeight","debouncedAutoResize","current","newMinHeight","scrollHeight","style","height","overflowY","Math","min","StyledTextArea","textarea","resizable","props","theme","components","padding","defaultProps","ref","uid","useUID","id","value","defaultValue","required","disabled","label","labelHidden","info","status","autoResize","maxLength","displayCharCount","hardStop","onChangeProp","onChange","restProps","t","useI18n","useAutoResize","undefined","textAreaRef","resizeTextArea","consolidatedRef","useConsolidatedRef","charCount","setCharCount","controlProp","length","e","target","Comp","as","FormField","charLimitDisplay","Text","variant","InputField","field","useState","displayvalue","inputValue","setInputValue","type","displaylabel"],"mappings":"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","file":"static/js/4.f8dd543e.chunk.js","sourcesContent":["import { useRef, useState, RefObject } from 'react';\n\nimport { debounce } from '../utils';\n\n/**\n * @example const [ref, resizeFunction] = useAutoResize();\n * maxHeight should be provided in pixels without units\n * minHeight should be provided in pixels without units\n * @returns * ref:: A reference for the element that the resize functionality should be applied to. [React RefObject](https://reactjs.org/docs/refs-and-the-dom.html)\n *          * resizeFunction:: The function to call to automatically resize the element.\n * element refers to auto resizable element\n */\nconst useAutoResize = <T extends HTMLElement = HTMLElement>(\n  maxHeight?: number,\n  minHeightProp?: number\n): [RefObject<T>, () => void] => {\n  const element = useRef<T>(null);\n\n  const [minHeight, setMinHeight] = useState(minHeightProp || 0);\n\n  const autoResize = () => {\n    if (element.current) {\n      let newMinHeight = minHeight;\n      if (!minHeight) {\n        newMinHeight = element.current.scrollHeight;\n        setMinHeight(newMinHeight);\n      }\n      // Reset the heights to the base height so there is an overflow / or none to calculate the new height\n      element.current.style.height = `${newMinHeight}px`;\n\n      if (maxHeight) {\n        element.current.style.overflowY =\n          element.current.scrollHeight > maxHeight ? 'auto' : 'hidden';\n        element.current.style.height = `${Math.min(element.current.scrollHeight, maxHeight)}px`;\n      } else {\n        element.current.style.height = `${element.current.scrollHeight}px`;\n      }\n    }\n  };\n\n  const debouncedAutoResize = debounce(autoResize, 100);\n\n  return [element, debouncedAutoResize];\n};\n\nexport default useAutoResize;\n","import styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\n\nconst StyledTextArea = styled.textarea<{ resizable: boolean }>(({ resizable }) => {\n  return css`\n    width: 100%;\n    min-height: ${props => props.theme.components['text-area']['min-height']};\n    padding: ${props => props.theme.components['text-area'].padding};\n    ${!resizable &&\n    css`\n      resize: none;\n    `}\n  `;\n});\n\nStyledTextArea.defaultProps = defaultThemeProp;\n\nexport default StyledTextArea;\n","import {\n  FC,\n  Ref,\n  forwardRef,\n  PropsWithoutRef,\n  ChangeEvent,\n  useCallback,\n  useState,\n  ChangeEventHandler,\n  useEffect\n} from 'react';\n\nimport { ForwardProps } from '../../types';\nimport FormField from '../FormField';\nimport { FormControlProps, StyledFormControl } from '../FormControl';\nimport { hasProp } from '../../utils';\nimport { useAutoResize, useConsolidatedRef, useI18n, useUID } from '../../hooks';\nimport Text from '../Text';\n\nimport StyledTextArea from './TextArea.styles';\n\nexport interface TextAreaProps extends FormControlProps {\n  /** Minimum length of characters that can be input. */\n  minLength?: number;\n  /** Maximum length of characters that can be input. */\n  maxLength?: number;\n  /**\n   * Allows the user to resize the Text Area.\n   * @default false\n   */\n  resizable?: boolean;\n  /**\n   * Enables the Text Area to resize itself automatically.\n   * @default false\n   */\n  autoResize?: boolean;\n  /**\n   * Display a live character count in relation to the maxLength.\n   * @default false\n   */\n  displayCharCount?: boolean;\n  /**\n   * Allow or disallow a value beyond the maxLength.\n   * @default true\n   */\n  hardStop?: boolean;\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>;\n}\n\nconst TextArea: FC<TextAreaProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<TextAreaProps>, ref: Ref<HTMLTextAreaElement>) => {\n    const uid = useUID();\n    const {\n      id = uid,\n      value,\n      defaultValue,\n      required = false,\n      disabled = false,\n      label,\n      labelHidden,\n      info,\n      status,\n      resizable = false,\n      autoResize = false,\n      maxLength,\n      displayCharCount = false,\n      hardStop = true,\n      onChange: onChangeProp,\n      ...restProps\n    } = props;\n\n    const t = useI18n();\n\n    const [textAreaRef, resizeTextArea] = useAutoResize<HTMLTextAreaElement>(undefined, 100);\n    const consolidatedRef = useConsolidatedRef(textAreaRef, ref);\n    const [charCount, setCharCount] = useState(0);\n\n    const controlProp: {\n      value?: string;\n      defaultValue?: string;\n    } = {};\n\n    useEffect(() => {\n      if (hasProp(props, 'value')) {\n        setCharCount(props.value ? props.value.length : 0);\n      } else if (hasProp(props, 'defaultValue')) {\n        setCharCount(props.defaultValue ? props.defaultValue.length : 0);\n      }\n    }, [props]);\n\n    // Conditionally render component as controlled/uncontrolled\n    if (hasProp(props, 'value')) {\n      controlProp.value = value ?? '';\n    } else if (hasProp(props, 'defaultValue')) {\n      controlProp.defaultValue = defaultValue ?? '';\n    }\n\n    const onChange = useCallback(\n      (e: ChangeEvent<HTMLTextAreaElement>) => {\n        if (!hardStop || maxLength === undefined || e.target.value.length <= maxLength) {\n          onChangeProp?.(e);\n          setCharCount(e.target.value.length);\n          resizeTextArea();\n        }\n      },\n      [onChangeProp, resizeTextArea, hardStop, maxLength]\n    );\n\n    const Comp = (\n      <StyledFormControl\n        {...{\n          ref: autoResize ? consolidatedRef : ref,\n          id,\n          required,\n          disabled,\n          status,\n          resizable,\n          maxLength: hardStop ? maxLength : undefined,\n          ...controlProp,\n          ...restProps,\n          onChange,\n          as: StyledTextArea\n        }}\n      />\n    );\n\n    return label || displayCharCount ? (\n      <FormField\n        {...{\n          label,\n          labelHidden,\n          id,\n          info,\n          status,\n          charLimitDisplay:\n            displayCharCount && typeof maxLength === 'number' ? (\n              <Text\n                variant='secondary'\n                aria-live={maxLength >= 0 && maxLength - charCount <= 20 ? 'polite' : 'off'}\n              >\n                {maxLength >= 0 ? t('x_of_y', [charCount || '0', maxLength]) : charCount}\n              </Text>\n            ) : undefined,\n          required,\n          disabled\n        }}\n      >\n        {Comp}\n      </FormField>\n    ) : (\n      Comp\n    );\n  }\n);\n\nexport default TextArea;\n","import { ChangeEvent, useState } from 'react';\nimport { TextArea as TextAreaCosmos } from '@pega/cosmos-react-core';\n\nexport default function InputField(props: any) {\n  const { field } = props;\n  const [inputValue, setInputValue] = useState(field.displayvalue);\n  return (\n    <TextAreaCosmos\n      type='text'\n      label={field.displaylabel}\n      value={inputValue}\n      onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {\n        setInputValue(e.target.value);\n      }}\n    />\n  );\n}\n"],"sourceRoot":""}