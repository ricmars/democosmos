{"version":3,"sources":["../../../../src/components/Card/CardContent.tsx","../../../../src/components/Card/CardFooter.tsx","../../../../src/components/SummaryList/SummaryList.tsx","components/Worklist.tsx","../../../../src/components/Card/CardHeader.tsx","../../../../src/components/Tasks/TaskList.tsx","../../../../src/components/Tasks/Tasks.tsx"],"names":["StyledCardContent","div","theme","base","spacing","components","card","padding","defaultProps","children","container","restProps","direction","as","StyledCardFooter","footer","props","justify","wrap","alignItems","StyledSummaryListContent","withConfig","loading","palette","StyledSummaryListItem","SummaryListItems","items","map","id","itemActions","actions","restItemProps","forwardedAs","SummaryList","ref","icon","name","count","onViewAll","noItemsText","error","t","content","placement","message","undefined","length","gap","variant","toLowerCase","onClick","Worklist","history","useNavigate","useState","isLimited","setIsLimited","page","window","portal","uiResources","context_data","pyPortal","summary_of_lists__","D_pyMyWorkList","pxResults","replace","tasklist","data","headerText","filter","item","i","pyID","pxRefObjectKey","split","path","getCaseTypeName","pxRefObjectClass","pxTaskLabel","meta","href","e","state","token","config","preventDefault","stopPropagation","openCaseType","pyLabel","genStatus","pyAssignmentStatus","pxUrgencyAssign","headerVisual","size","getOperatorName","imageSrc","getDataUrl","getOperatorUrl","emptyPlaceholder","onExpandToggle","cur","StyledCardHeader","header","CardHeader","grow","displayName","StyledTaskList","ul","hasFooter","avatar","summary","SummaryItem","visual","primary","secondary","Flex","key","StyledTasks","Card","openItem","shadow","low","headerSecondary","find","useI18n","TaskItems","Text","Count","CardContent","CardFooter","Button","currentTarget","requestAnimationFrame","getBoundingClientRect","top","scrollIntoView"],"mappings":"6PAiBaA,EAAoB,IAAOC,KAAI,YAAc,IAAXC,EAAW,EAAXA,MAC7C,OAAO,YAAP,0NACI,IAA0B,IAAc,IAElBA,EAAMC,KAAKC,QAAiBF,EAAMG,WAAWC,KAAKC,QAGlE,QAOZP,EAAkBQ,aAAe,IAclB,IAZyD,SAAC,GAIhB,IAHvDC,EAGuD,EAHvDA,SACAC,EAEuD,EAFvDA,UACGC,EACoD,iBACvD,OACE,cAAC,IAAD,2BAAUA,GAAV,IAAqBD,UAAS,aAAIE,UAAW,UAAaF,GAAaG,GAAIb,EAAiB,SACzFS,SAAQ,K,sKCzBFK,EAAmB,IAAOC,QAAO,YAAc,IAAXb,EAAW,EAAXA,MAC/C,OAAO,YAAP,oHACI,IAA0B,IAAc,IAClBA,EAAMC,KAAKC,QAAiBF,EAAMG,WAAWC,KAAKC,YAK9EO,EAAiBN,aAAe,IAsBjB,IApBuD,SACpEQ,GAEA,IAAQP,EAAoCO,EAApCP,SAAUQ,EAA0BD,EAA1BC,QAAYN,EAA9B,YAA4CK,EAA5C,GAEA,OACE,cAAC,IAAD,yBACEH,GAAIC,EACJJ,UAAW,CACTQ,KAAM,OACNC,WAAY,SACZF,YAEEN,GAPN,IAOe,SAEZF,SAAQ,K,uZCaFW,EAA2B,YAAO,KAAaC,WAC1D,YAAU,WAD4B,EAGtC,gBAAGnB,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,QAAV,OAAwB,YAAvB,IAAD,qIACIA,GACF,YADS,yDAM0BpB,EAAMC,KAAKoB,QAAQ,mBAK1DH,EAAyBZ,aAAe,IAEjC,IAAMgB,EAA4C,YAAO,IAAP,EACvD,gBAAGtB,EAAH,EAAGA,MAAH,OACE,YADD,IAAD,sIAEeA,EAAMC,KAAKC,QAGaF,EAAMC,KAAKoB,QAAQ,mBAK5DC,EAAsBhB,aAAe,IAE9B,IAAMiB,EAAmB,SAAC,GAA8C,IAA5CC,EAA4C,EAA5CA,MACjC,OACE,6BACGA,EAAMC,KAAI,YAAmD,IAAhDC,EAAgD,EAAhDA,GAAaC,EAAmC,EAA5CC,QAAyBC,EAAmB,iBAC5D,OACE,cAACP,EAAD,2BAEMO,GAFN,IAGEC,YAAY,KACZF,QAASD,GAAe,cAAC,IAAO,CAACH,MAAOG,QAAW,KAH9CD,YAMT,IAKFK,EAAmD,sBACvD,WAaEC,GACE,IAZAC,EAYA,EAZAA,KACAC,EAWA,EAXAA,KACAC,EAUA,EAVAA,MACAP,EASA,EATAA,QACAJ,EAQA,EARAA,MACAY,EAOA,EAPAA,UACAhB,EAMA,EANAA,QACAiB,EAKA,EALAA,YACAC,EAIA,EAJAA,MACG7B,EAGH,iBACI8B,EAAI,cAEJC,EAAU,mBAAQ,WACtB,OAAIpB,EAEA,cAAC,IAAQ,CAACqB,UAAU,QAAQC,QAA4B,kBAAZtB,EAAuBA,OAAUuB,QAAS,GAItFL,EACK,cAAC,IAAD,gBAA2B,IAAVA,EAAiB,GAAKA,QAAM,GAG/Cd,EAAMoB,OAAS,EACpB,cAACrB,EAAgB,CAACC,MAAOA,QAAK,GAE9B,cAAC,IAAU,CAACkB,QAASL,QAAW,KAEjC,CAACjB,EAASI,EAAOa,EAAaC,IAEjC,OACE,eAAC,IAAD,yBAAMN,IAAKA,GAASvB,GAApB,IAA6B,WACzBwB,GAAQC,GAAyB,kBAAVC,GAAsBP,IAC7C,eAAC,IAAU,WACT,eAAC,IAAI,CAACpB,UAAW,CAAES,WAAY,SAAU4B,IAAK,GAAG,UAC9CZ,GAAQ,cAAC,IAAI,CAACC,KAAMD,QAAI,GACxBC,GAAQ,cAAC,IAAI,CAACY,QAAQ,KAAI,SAAEZ,QAAI,GACf,kBAAVC,GAAsB,cAAC,IAAK,UAAEA,QAAK,UAAS,GAErDP,GAAW,cAAC,IAAO,CAACJ,MAAOI,QAAO,UAAI,GAI3C,cAACV,EAAwB,CAACE,QAASA,EAAO,SAAGoB,QAAO,IAElDF,GAA0B,kBAAVH,GAAsBA,EAAQX,EAAMoB,QAAUR,GAC9D,cAAC,IAAU,CAACrB,QAAQ,SAAQ,SAC1B,cAAC,IAAM,CACL+B,QAAQ,OAAM,aACFZ,EAAOK,EAAE,gBAAiB,CAACL,EAAKa,gBAAkBR,EAAE,YAChES,QAASZ,EAAS,SAEjBG,EAAE,kBAAW,SACP,WAEZ,MAMM,O,yMC/JA,SAASU,IACtB,IAAMC,EAAUC,cAChB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EACJC,OACAC,OAAOC,YAAYC,aAAaC,SAASC,mBAAmBC,eAAeC,UAAUC,QACrF,aACA,IAEEC,EAAkB,GACjBT,OAAeC,OAAOS,KAAKX,GAAMQ,YACpCE,EAAYT,OAAeC,OAAOS,KAAKX,GAAMQ,WA6D/C,OACE,cAAC,IAAD,CACEI,WAAW,cACXhC,MAAO8B,EAASrB,OAChBpB,MA/CKyC,EACJG,QAAO,SAACC,EAAMC,GACb,OAAQjB,GAAaiB,EAAI,KAE1B7C,KAAI,SAAC4C,EAAMC,GACV,IAAMC,EAAOF,EAAKG,eAAeC,MAAM,KAAK,GACtCC,EAAI,gBAAYC,YAAgBN,EAAKO,kBAAjC,YAAsDL,GAChE,MAAO,CACLrC,KAAMmC,EAAKQ,YACXC,KACE,cAAC,IAAD,CACEtD,MAAO,CACL,eAAC,IAAD,CAAMsB,QAAQ,YAAd,oBACU,IACR,eAAC,IAAD,CACEiC,KAAML,EACN1B,QAAS,SAACgC,IA/BP,SAACN,EAAcM,GAClC9B,EAAQwB,EAAM,CACZO,MAAO,CACLC,MAAQ1B,OAAe0B,MACvBzB,OAASD,OAAeC,OACxB0B,OAAS3B,OAAe2B,UAG5BH,EAAEI,iBACFJ,EAAEK,kBAuBgBC,CAAaZ,EAAMM,IAHvB,UAMGX,EAAKkB,QANR,IAMkBhB,QAGpBiB,YAAUnB,EAAKoB,oBACf,eAAC,IAAD,CAAM3C,QAAQ,YAAd,qBAAmCuB,EAAKqB,sBAI9C9D,QACE,cAAC,IAAD,CACEkB,QAAQ,UACRE,QAAS,aAFX,gBASFR,QAAS,SAUbmD,aACE,cAAC,IAAD,CACEC,KAAK,IACL1D,KAAM2D,cACNC,SAAUC,YAAW,gBAAiBC,iBAG1CC,iBAAkB,cAAC,IAAD,IAClBC,eAAgB,WACd5C,GAAa,SAAA6C,GAAG,OAAKA,U,qJC3EhBC,EAAmB,IAAOC,QAAwB,YAAuB,IAApBrG,EAAoB,EAApBA,MAAOgD,EAAa,EAAbA,QACvE,OAAO,YAAP,wNACI,IAA0B,IAAc,IAClBhD,EAAMC,KAAKC,QAAiBF,EAAMG,WAAWC,KAAKC,QAEpE,IAKA2C,EAAU,wBAAqBL,MAMzCyD,EAAiB9F,aAAe,IAEhC,IAAMgG,EAAgE,sBACpE,WAEEtE,GACE,IAFAzB,EAEA,EAFAA,SAAUqB,EAEV,EAFUA,QAAYnB,EAEtB,iBACF,OACE,cAAC,IAAD,yBACED,UAAW,CAAES,WAAY,SAAUF,QAAS,WAC5CJ,GAAIyF,GACA3F,GAHN,IAIEuB,IAAKA,EAAG,SAEPJ,EACC,qCACE,cAAC,IAAI,CAACpB,UAAW,CAAES,WAAY,UAAYoD,KAAM,CAAEkC,KAAM,GAAG,SACzDhG,QAAQ,GAEX,8BAAMqB,QAAO,UAAO,GAGtBrB,SACD,MAMT+F,EAAWE,YAAc,aACV,O,2OClCTC,EAAiB,IAAOC,IAA2B,YAAyB,IAAtB1G,EAAsB,EAAtBA,MAAO2G,EAAe,EAAfA,UACjE,OAAO,YAAP,sCACIA,GACF,YADW,8GAG0B3G,EAAMC,KAAKoB,QAAQ,oBAM5DoF,EAAenG,aAAe,IAEvB,I,EAAM,EAAW,SAAC,GAAyE,IAAvE4B,EAAuE,EAAvEA,KAAM0E,EAAiE,EAAjEA,OAAQ9B,EAAyD,EAAzDA,KAAMlD,EAAmD,EAAnDA,QAASY,EAA0C,EAA1CA,QAAY/B,EAA8B,iBAC1FoG,EACJ,cAACC,EAAA,EAAW,CACVC,OAAQH,EACRI,QAAS9E,EACT+E,UAAWnC,EACXlD,QAASY,EAAU,KAAOZ,QAAO,GAGrC,OACE,cAACsF,EAAA,EAAD,yBACE1G,UAAW,CAAEE,UAAW,SAAUmC,IAAK,GACvCwB,KAAM,CAAEkC,KAAM,GACd5F,GAAI,IACJmB,YAAY,MACRrB,GALN,IAKe,SAEZ+B,EACC,qCACGqE,EACArE,SAAO,GAGVqE,SACD,IAiBQ,EAZmD,sBAChE,WAA+D7E,GAAO,IAAnER,EAAmE,EAAnEA,MAAmE,IAA5DmF,iBAA4D,SACpE,OACE,cAACO,EAAA,EAAI,CAAC1G,UAAW,CAAEE,UAAW,UAAYC,GAAI8F,EAAgBE,UAAWA,EAAW3E,IAAKA,EAAG,SACzFR,EAAMC,KAAI,SAAC4C,EAAMC,GAAP,OACT,wBAAC,EAAD,2BAAcD,GAAd,IAAoB8C,IAAG,UAAK7C,EAAI,eAChC,M,sGC5CJ8C,EAAc,YAAOC,EAAA,EAAP,EAAqC,YAAwB,IAArBrH,EAAqB,EAArBA,MAC1D,OAD+E,EAAdsH,SAE7D,YADW,2DAEKtH,EAAMC,KAAKsH,OAAOC,KAElC,QAkES,IA/D8B,SAAC1G,GAC5C,MASIA,EARFU,aADF,MACU,GADV,EAEE2C,EAOErD,EAPFqD,WACAwB,EAME7E,EANF6E,aACA8B,EAKE3G,EALF2G,gBACAtF,EAIErB,EAJFqB,MACA+D,EAGEpF,EAHFoF,eACAD,EAEEnF,EAFFmF,iBACGxF,EARL,YASIK,EATJ,GAUMwG,EAAW9F,EAAMkG,MAAK,SAAArD,GAAI,OAAIA,EAAK7B,WACnCD,EAAI,OAAAoF,EAAA,KAEJhB,EAAY,mBAAQ,WACxB,OAAQW,GAA6B,kBAAVnF,GAAsBA,EAAQ,IACxD,CAACmF,EAAUnF,IAERyF,EAAY,mBAAQ,WACxB,OAAON,EAAW,cAAC,EAAD,eAAcA,QAAQ,GAAO,cAAC,EAAQ,CAAC9F,MAAOA,EAAOmF,UAAWA,QAAS,KAC1F,CAACnF,EAAO8F,IAEX,OACE,eAACF,EAAD,2BAAiB3G,GAAjB,IAA4B6G,WAAYA,EAAQ,WAC5CA,GACA,cAAChB,EAAA,EAAU,UACT,cAACQ,EAAA,EAAW,CACVC,OAAQpB,EACRqB,QACE,eAACE,EAAA,EAAI,CAAC1G,UAAW,CAAES,WAAY,SAAU4B,IAAK,GAAG,UAC/C,cAACgF,EAAA,EAAI,CAAC/E,QAAQ,KAAI,SAAEqB,QAAU,GAC9B,cAAC2D,EAAA,EAAK,iBAAE3F,QAAF,IAAEA,IAAS,WAAI,UAAS,GAGlC8E,UAAWQ,QAAe,SAC1B,GAGN,cAACM,EAAA,EAAW,UAAEvG,EAAMoB,OAAS,EAAIgF,EAAY3B,QAAgB,GAE5DU,GACC,cAACqB,EAAA,EAAU,CAACjH,QAAQ,SAAQ,SAC1B,cAACkH,EAAA,EAAM,CACLnF,QAAQ,OAAM,aACFP,EAAIJ,GAASA,EAAQX,EAAMoB,OAAS,YAAc,YAAa,CAAC,UAC5EI,QAAS,SAACgC,GAER,GADc,OAAdkB,QAAc,IAAdA,OACM/D,GAASA,GAASX,EAAMoB,OAAQ,CACpC,IAAQsF,EAAkBlD,EAAlBkD,cACRC,uBAAsB,WAChBD,EAAcE,wBAAwBC,IAAM,GAAGH,EAAcI,sBAGtE,SAEA/F,EAAIJ,GAASA,EAAQX,EAAMoB,OAAS,YAAc,mBAAY,SACxD,WAEZ","file":"static/js/26.99289b08.chunk.js","sourcesContent":["import { FunctionComponent, PropsWithChildren, ReactNode } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport { BaseProps, ForwardProps } from '../../types';\nimport Flex, { FlexProps } from '../Flex';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\nimport { StyledCardFooter } from './CardFooter';\n\nexport interface CardContentProps extends BaseProps {\n  /** The content of the Card. */\n  children: ReactNode;\n  container?: Exclude<FlexProps['container'], boolean>;\n}\n\nexport const StyledCardContent = styled.div(({ theme }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      position: relative;\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      & + &,\n      & + ${StyledCardFooter} {\n        padding-block-start: 0;\n      }\n    }\n  `;\n});\n\nStyledCardContent.defaultProps = defaultThemeProp;\n\nconst CardContent: FunctionComponent<CardContentProps & ForwardProps> = ({\n  children,\n  container,\n  ...restProps\n}: PropsWithChildren<CardContentProps & ForwardProps>) => {\n  return (\n    <Flex {...restProps} container={{ direction: 'column', ...container }} as={StyledCardContent}>\n      {children}\n    </Flex>\n  );\n};\n\nexport default CardContent;\n","import { FunctionComponent, PropsWithChildren } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport Flex, { FlexContainerProps } from '../Flex';\nimport { BaseProps, ForwardProps } from '../../types';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\n\nexport interface CardFooterProps extends BaseProps {\n  /** [justify-content](https://css-tricks.com/almanac/properties/j/justify-content/) */\n  justify?: FlexContainerProps['justify'];\n}\n\nexport const StyledCardFooter = styled.footer(({ theme }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n    }\n  `;\n});\n\nStyledCardFooter.defaultProps = defaultThemeProp;\n\nconst CardFooter: FunctionComponent<CardFooterProps & ForwardProps> = (\n  props: PropsWithChildren<CardFooterProps>\n) => {\n  const { children, justify, ...restProps } = props;\n\n  return (\n    <Flex\n      as={StyledCardFooter}\n      container={{\n        wrap: 'wrap',\n        alignItems: 'center',\n        justify\n      }}\n      {...restProps}\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport default CardFooter;\n","import { forwardRef, PropsWithoutRef, Ref, FC, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Actions from '../Actions';\nimport Flex from '../Flex';\nimport Text from '../Text';\nimport Count from '../Badges/Count';\nimport Icon from '../Icon';\nimport Card, { CardHeader, CardContent, CardFooter } from '../Card';\nimport EmptyState, { EmptyStateProps } from '../EmptyState';\nimport { ForwardProps, NoChildrenProp, OmitStrict, Action } from '../../types';\nimport { omitProps } from '../../styles';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport SummaryItem, { SummaryItemProps } from '../SummaryItem';\nimport Progress from '../Progress';\nimport Button from '../Button';\nimport ErrorState from '../ErrorState';\nimport type { ErrorStateProps } from '../ErrorState';\n\nexport interface SummaryListProps extends NoChildrenProp {\n  /** Name of the utility to be used as its heading along with associated actions and aria attributes. */\n  name?: string;\n  /** Identifier for the icon within Pega icons.  */\n  icon?: string;\n  /** Integer representing the total count of items for a list utility dataset. */\n  count?: number;\n  /** Top level actions for the utility. If more than one action is passed a consolidated ActionMenu will be generated. */\n  actions?: Action[];\n  /** If the utility is in a state of fetching data. */\n  loading?: boolean | string;\n  /** An array of SummaryListItem objects to render. Pass an appropriately limited length array with a desired sort order based on design system defaults or config. */\n  items: SummaryListItem[];\n  /** User click initiated callback for when to show view all modal. List lengths less than the count prop will display a \"View all\" button with this function is bound to. */\n  onViewAll?: (callback: Function) => void;\n  /** A simple message to display when there are no items. */\n  noItemsText?: EmptyStateProps['message'];\n  /**\n   * Indicate an error occurred while acquiring data for the list.\n   * The default error state may be overridden with custom props.\n   */\n  error?: boolean | ErrorStateProps;\n  /** Ref for the SummaryList's root element.  */\n  ref?: Ref<HTMLElement>;\n}\n\nexport interface SummaryListItem extends OmitStrict<SummaryItemProps, 'actions'>, ForwardProps {\n  /** A unique id to represent the item. */\n  id: string;\n  /** A set of Actions to render alongside the item. If more than one action is passed a consolidated ActionMenu will be generated. */\n  actions?: Action[];\n}\n\nexport const StyledSummaryListContent = styled(CardContent).withConfig<{ loading?: boolean }>(\n  omitProps('loading')\n)(\n  ({ theme, loading }) => css`\n    ${loading &&\n    css`\n      min-height: 4rem;\n    `}\n\n    &:not(:last-child) > ul > li:last-child {\n      border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n    }\n  `\n);\n\nStyledSummaryListContent.defaultProps = defaultThemeProp;\n\nexport const StyledSummaryListItem: typeof SummaryItem = styled(SummaryItem)(\n  ({ theme }) =>\n    css`\n      padding: ${theme.base.spacing} 0;\n\n      &:not(:last-child) {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n      }\n    `\n);\n\nStyledSummaryListItem.defaultProps = defaultThemeProp;\n\nexport const SummaryListItems = ({ items }: Pick<SummaryListProps, 'items'>) => {\n  return (\n    <ul>\n      {items.map(({ id, actions: itemActions, ...restItemProps }) => {\n        return (\n          <StyledSummaryListItem\n            key={id}\n            {...restItemProps}\n            forwardedAs='li'\n            actions={itemActions && <Actions items={itemActions} />}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nconst SummaryList: FC<SummaryListProps & ForwardProps> = forwardRef(\n  (\n    {\n      icon,\n      name,\n      count,\n      actions,\n      items,\n      onViewAll,\n      loading,\n      noItemsText,\n      error,\n      ...restProps\n    }: PropsWithoutRef<SummaryListProps>,\n    ref: SummaryListProps['ref']\n  ) => {\n    const t = useI18n();\n\n    const content = useMemo(() => {\n      if (loading) {\n        return (\n          <Progress placement='local' message={typeof loading === 'string' ? loading : undefined} />\n        );\n      }\n\n      if (error) {\n        return <ErrorState {...(error === true ? {} : error)} />;\n      }\n\n      return items.length > 0 ? (\n        <SummaryListItems items={items} />\n      ) : (\n        <EmptyState message={noItemsText} />\n      );\n    }, [loading, items, noItemsText, error]);\n\n    return (\n      <Card ref={ref} {...restProps}>\n        {(icon || name || typeof count === 'number' || actions) && (\n          <CardHeader>\n            <Flex container={{ alignItems: 'center', gap: 1 }}>\n              {icon && <Icon name={icon} />}\n              {name && <Text variant='h2'>{name}</Text>}\n              {typeof count === 'number' && <Count>{count}</Count>}\n            </Flex>\n            {actions && <Actions items={actions} />}\n          </CardHeader>\n        )}\n\n        <StyledSummaryListContent loading={loading}>{content}</StyledSummaryListContent>\n\n        {!error && typeof count === 'number' && count > items.length && onViewAll && (\n          <CardFooter justify='center'>\n            <Button\n              variant='link'\n              aria-label={name ? t('view_all_noun', [name.toLowerCase()]) : t('view_all')}\n              onClick={onViewAll}\n            >\n              {t('view_all')}\n            </Button>\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n);\n\nexport default SummaryList;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Tasks } from '@pega/cosmos-react-work';\nimport { Button, Avatar, EmptyState, Text, MetaList, Link } from '@pega/cosmos-react-core';\nimport { getOperatorName, getOperatorUrl, getCaseTypeName } from '../utils/env';\nimport { getDataUrl } from '../services';\nimport { genStatus } from '../utils/status';\n\nexport default function Worklist() {\n  const history = useNavigate();\n  const [isLimited, setIsLimited] = useState(true);\n\n  const page = (\n    window as any\n  ).portal.uiResources.context_data.pyPortal.summary_of_lists__.D_pyMyWorkList.pxResults.replace(\n    '.pxResults',\n    ''\n  );\n  let tasklist: any[] = [];\n  if ((window as any).portal.data[page].pxResults) {\n    tasklist = (window as any).portal.data[page].pxResults;\n  }\n\n  const openCaseType = (path: string, e: React.FormEvent<HTMLFormElement>) => {\n    history(path, {\n      state: {\n        token: (window as any).token,\n        portal: (window as any).portal,\n        config: (window as any).config\n      }\n    });\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const openAssignment = () => {};\n\n  const renderTasklist = () => {\n    return tasklist\n      .filter((item, i) => {\n        return !isLimited || i < 3;\n      })\n      .map((item, i) => {\n        const pyID = item.pxRefObjectKey.split(' ')[1];\n        const path = `/case/${getCaseTypeName(item.pxRefObjectClass)}/${pyID}`;\n        return {\n          name: item.pxTaskLabel,\n          meta: (\n            <MetaList\n              items={[\n                <Text variant='secondary'>\n                  Task in{' '}\n                  <Link\n                    href={path}\n                    onClick={(e: React.FormEvent<HTMLFormElement>) => {\n                      openCaseType(path, e);\n                    }}\n                  >\n                    {item.pyLabel} {pyID}\n                  </Link>\n                </Text>,\n                genStatus(item.pyAssignmentStatus),\n                <Text variant='secondary'>Urgency {item.pxUrgencyAssign}</Text>\n              ]}\n            />\n          ),\n          actions: (\n            <Button\n              variant='primary'\n              onClick={() => {\n                openAssignment();\n              }}\n            >\n              Go\n            </Button>\n          ),\n          content: null\n        };\n      });\n  };\n\n  return (\n    <Tasks\n      headerText='My Worklist'\n      count={tasklist.length}\n      items={renderTasklist()}\n      headerVisual={\n        <Avatar\n          size='l'\n          name={getOperatorName()}\n          imageSrc={getDataUrl('operatorimage', getOperatorUrl())}\n        />\n      }\n      emptyPlaceholder={<EmptyState />}\n      onExpandToggle={() => {\n        setIsLimited(cur => !cur);\n      }}\n    />\n  );\n}\n","import { forwardRef, FunctionComponent, PropsWithChildren, ReactNode, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { BaseProps, ForwardProps } from '../../types';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\nimport { StyledCardContent } from './CardContent';\n\nexport interface CardHeaderProps extends BaseProps {\n  /** The Card header content. */\n  children: ReactNode;\n  /** Action Buttons that will render within the header. */\n  actions?: ReactNode;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport const StyledCardHeader = styled.header<CardHeaderProps>(({ theme, onClick }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      + ${StyledCardContent} {\n        padding-block-start: 0;\n      }\n\n      &:hover {\n        ${onClick ? 'cursor: pointer;' : undefined}\n      }\n    }\n  `;\n});\n\nStyledCardHeader.defaultProps = defaultThemeProp;\n\nconst CardHeader: FunctionComponent<CardHeaderProps & ForwardProps> = forwardRef(\n  (\n    { children, actions, ...restProps }: PropsWithChildren<CardHeaderProps>,\n    ref: CardHeaderProps['ref']\n  ) => {\n    return (\n      <Flex\n        container={{ alignItems: 'center', justify: 'between' }}\n        as={StyledCardHeader}\n        {...restProps}\n        ref={ref}\n      >\n        {actions ? (\n          <>\n            <Flex container={{ alignItems: 'center' }} item={{ grow: 1 }}>\n              {children}\n            </Flex>\n            <div>{actions}</div>\n          </>\n        ) : (\n          children\n        )}\n      </Flex>\n    );\n  }\n);\n\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;\n","import { forwardRef, FunctionComponent, PropsWithoutRef, ReactNode, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport {\n  ForwardProps,\n  SummaryItem,\n  StyledSummaryListItem,\n  Flex,\n  defaultThemeProp\n} from '@pega/cosmos-react-core';\n\nexport interface TaskItemProps {\n  /** Name of the task displayed in the list. */\n  name: NonNullable<ReactNode>;\n  /** Avatar element to represent the task's assignee. */\n  avatar?: ReactNode;\n  /** MetaList element with info related to the task. */\n  meta?: ReactNode;\n  /** Region for task level actions such as opening or dismissing. */\n  actions?: ReactNode;\n  /** Content for the task when open. */\n  content?: ReactNode;\n  [key: string]: unknown;\n}\n\nexport interface TaskListProps {\n  items: TaskItemProps[];\n  hasFooter?: boolean;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLElement>;\n}\n\nconst StyledTaskList = styled.ul<{ hasFooter: boolean }>(({ theme, hasFooter }) => {\n  return css`\n    ${hasFooter &&\n    css`\n      > li:last-child {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n      }\n    `}\n  `;\n});\n\nStyledTaskList.defaultProps = defaultThemeProp;\n\nexport const TaskItem = ({ name, avatar, meta, actions, content, ...restProps }: TaskItemProps) => {\n  const summary = (\n    <SummaryItem\n      visual={avatar}\n      primary={name}\n      secondary={meta}\n      actions={content ? null : actions}\n    />\n  );\n  return (\n    <Flex\n      container={{ direction: 'column', gap: 2 }}\n      item={{ grow: 1 }}\n      as={StyledSummaryListItem}\n      forwardedAs='li'\n      {...restProps}\n    >\n      {content ? (\n        <>\n          {summary}\n          {content}\n        </>\n      ) : (\n        summary\n      )}\n    </Flex>\n  );\n};\n\nconst TaskList: FunctionComponent<TaskListProps & ForwardProps> = forwardRef(\n  ({ items, hasFooter = false }: PropsWithoutRef<TaskListProps>, ref) => {\n    return (\n      <Flex container={{ direction: 'column' }} as={StyledTaskList} hasFooter={hasFooter} ref={ref}>\n        {items.map((item, i) => (\n          <TaskItem {...item} key={`${i + 1}`} />\n        ))}\n      </Flex>\n    );\n  }\n);\n\nexport default TaskList;\n","import { ReactNode, FC, ReactElement, useMemo, MouseEvent } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardFooter,\n  Flex,\n  Text,\n  SummaryItem,\n  Count,\n  Button,\n  useI18n,\n  ForwardProps\n} from '@pega/cosmos-react-core';\n\nimport TaskList, { TaskItem, TaskItemProps } from './TaskList';\n\nexport interface TasksProps {\n  /** An array of TaskItemProps to generate the list.  */\n  items: TaskItemProps[];\n  /** Content to render when the list is empty. */\n  emptyPlaceholder: ReactNode;\n  /** Heading text to render at the top of the list. */\n  headerText: string;\n  /** A visual element i.e. (Avatar | Icon) to accompany the header text. */\n  headerVisual?: ReactElement;\n  /** A region for supplemental task list info or controls. */\n  headerSecondary?: ReactNode;\n  /** Integer representing the total count of tasks. */\n  count?: number | null;\n  /** Callback for when to show more/less button is clicked. Lists greater than 3 items will display the show toggle button in its footer. */\n  onExpandToggle?: () => void;\n}\n\nconst StyledTasks = styled(Card)<{ openItem?: boolean }>(({ theme, openItem }) => {\n  return openItem\n    ? css`\n        box-shadow: ${theme.base.shadow.low};\n      `\n    : null;\n});\n\nconst Tasks: FC<ForwardProps & TasksProps> = (props: TasksProps) => {\n  const {\n    items = [],\n    headerText,\n    headerVisual,\n    headerSecondary,\n    count,\n    onExpandToggle,\n    emptyPlaceholder,\n    ...restProps\n  } = props;\n  const openItem = items.find(item => item.content);\n  const t = useI18n();\n\n  const hasFooter = useMemo(() => {\n    return !openItem && typeof count === 'number' && count > 3;\n  }, [openItem, count]);\n\n  const TaskItems = useMemo(() => {\n    return openItem ? <TaskItem {...openItem} /> : <TaskList items={items} hasFooter={hasFooter} />;\n  }, [items, openItem]);\n\n  return (\n    <StyledTasks {...restProps} openItem={!!openItem}>\n      {!openItem && (\n        <CardHeader>\n          <SummaryItem\n            visual={headerVisual}\n            primary={\n              <Flex container={{ alignItems: 'center', gap: 1 }}>\n                <Text variant='h2'>{headerText}</Text>\n                <Count>{count ?? null}</Count>\n              </Flex>\n            }\n            secondary={headerSecondary}\n          />\n        </CardHeader>\n      )}\n      <CardContent>{items.length > 0 ? TaskItems : emptyPlaceholder}</CardContent>\n\n      {hasFooter && (\n        <CardFooter justify='center'>\n          <Button\n            variant='link'\n            aria-label={t(!!count && count > items.length ? 'show_more' : 'show_less', ['tasks'])}\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              onExpandToggle?.();\n              if (!!count && count <= items.length) {\n                const { currentTarget } = e;\n                requestAnimationFrame(() => {\n                  if (currentTarget.getBoundingClientRect().top < 0) currentTarget.scrollIntoView();\n                });\n              }\n            }}\n          >\n            {t(!!count && count > items.length ? 'show_more' : 'show_less')}\n          </Button>\n        </CardFooter>\n      )}\n    </StyledTasks>\n  );\n};\n\nexport default Tasks;\n"],"sourceRoot":""}