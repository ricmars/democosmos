{"version":3,"sources":["../../../../src/components/Select/Select.tsx","../../../../src/components/Select/Option.tsx","fields/Dropdown.tsx"],"names":["StyledSelect","select","props","theme","base","components","fg","foreground","encodeURIComponent","rtl","useDirection","height","padding","spacing","status","defaultProps","ref","uid","useUID","children","id","label","labelHidden","info","required","disabled","readOnly","actions","restProps","Comp","as","undefined","onMouseDown","e","preventDefault","onKeyDown","includes","key","FormField","Dropdown","field","displaylabel","value","displayvalue","onChange","onBlur","options","map","item","index","reference"],"mappings":"2VAsDaA,EAAe,IAAOC,QAA4B,SAAAC,GAC7D,MAMIA,EAAMC,MALRC,EADF,EACEA,KADF,IAEEC,WACwCC,EAH1C,EAGI,gBAAkB,oBAClBL,EAJJ,EAIIA,OAIEM,EAAaC,mBAAmBF,GAC9BG,EAAQ,OAAAC,EAAA,KAARD,IAER,OAAO,YAAP,6/DAMYR,EAAOU,OACHP,EAAK,YAAY,aACPH,EAAOW,QACAR,EAAKS,QAG4EN,EAEpFH,EAAKS,QACVJ,EAAML,EAAKS,QAAR,sBAAiCT,EAAKS,QAAtC,MACVZ,EAAO,gBACDG,EAAK,iBAAsBH,EAAO,kBAErDC,EAAMY,QACT,YADE,yDAEgBb,EAAO,iBAQTG,EAAK,YAAY,kBAKrCJ,EAAae,aAAe,IAE5B,IAsEe,EAtE+C,sBAC5D,SAACb,EAAqCc,GACpC,IAAMC,EAAM,OAAAC,EAAA,KAEVC,EAWEjB,EAXFiB,SADF,EAYIjB,EAVFkB,UAFF,MAEOH,EAFP,EAGEI,EASEnB,EATFmB,MACAC,EAQEpB,EARFoB,YACAC,EAOErB,EAPFqB,KACAT,EAMEZ,EANFY,OANF,EAYIZ,EALFsB,gBAPF,WAYItB,EAJFuB,gBARF,WAYIvB,EAHFwB,gBATF,SAUEC,EAEEzB,EAFFyB,QACGC,EAXL,YAYI1B,EAZJ,GAcM2B,EACJ,cAAC,IAAD,2BACMD,GADN,IAEEE,GAAI9B,EACJoB,GAAIA,EACJN,OAAQA,EACRU,SAAUA,EACVC,SAAUA,EACVC,SAAUA,EAAQ,gBACHA,EAAW,YAASK,EACnCf,IAAKA,EACLgB,YACEN,EACI,SAACO,GACCA,EAAEC,uBAEJH,EAENI,UACET,EACI,SAACO,GAEM,CAAC,SAAU,OAAOG,SAASH,EAAEI,MAAMJ,EAAEC,uBAE5CH,EAAS,SAGdZ,SAAQ,GAIb,OAAOE,EACL,cAACiB,EAAA,EAAD,2BACM,CACFjB,QACAC,cACAF,KACAG,OACAT,SACAU,WACAC,WACAC,WACAC,YAVJ,IAWG,SAEAE,SAAI,GAGPA,K,eC1JA,EAAwD,SAAC3B,GAC7D,IAAQiB,EAA2BjB,EAA3BiB,SAAaS,EAArB,YAAmC1B,EAAnC,GACA,OAAO,kDAAY0B,GAAZ,IAAqB,SAAGT,SAAQ,IAGzC,EAAOJ,aAPoC,GAS5B,QCjBA,SAASwB,EAASrC,GAC/B,IAAQsC,EAAUtC,EAAVsC,MACR,OACE,cAAC,EAAD,CACEnB,MAAOmB,EAAMC,aACbC,MAAOF,EAAMG,aACbC,SAAU,SAACX,KACXY,OAAQ,SAACZ,KAJX,SAMGO,EAAMM,QAAQC,KAAI,SAACC,EAAWC,GAAZ,OACjB,cAAC,EAAD,CAAqDP,MAAOM,EAAKX,IAAjE,SACGW,EAAKN,OADR,mBAAyBF,EAAMU,UAA/B,YAA4CD","file":"static/js/18.acefd66e.chunk.js","sourcesContent":["import {\n  forwardRef,\n  FunctionComponent,\n  PropsWithoutRef,\n  Ref,\n  ReactNode,\n  ChangeEventHandler,\n  MouseEvent\n} from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport { Action, ForwardProps } from '../../types';\nimport FormField from '../FormField';\nimport { StyledFormControl, FormControlProps } from '../FormControl';\nimport { useDirection, useUID } from '../../hooks';\n\nexport interface SelectProps {\n  /** Pass Options components as children to render the options of the Select list. */\n  children: ReactNode;\n  /** Called when an Option is chosen within the list. */\n  onChange?: ChangeEventHandler<HTMLSelectElement>;\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /** Visually hides the label region. */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /**\n   * Creates a controlled input and sets the value. Requires an onChange handler to update value.\n   * value + onChange is the recommended method per React team.\n   */\n  value?: FormControlProps['value'];\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Makes the input non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */\n  name?: FormControlProps['name'];\n  /** Pass an array of Action objects to append button(s) inline with the Select. */\n  actions?: Action[];\n  /** A ref to the select element. */\n  ref?: Ref<HTMLSelectElement>;\n}\n\nexport const StyledSelect = styled.select<{ status: boolean }>(props => {\n  const {\n    base,\n    components: {\n      'form-control': { 'foreground-color': fg },\n      select\n    }\n  } = props.theme;\n\n  const foreground = encodeURIComponent(fg);\n  const { rtl } = useDirection();\n\n  return css`\n    appearance: none;\n    -webkit-appearance: none;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    width: 100%;\n    height: ${select.height};\n    min-height: ${base['hit-area']['mouse-min']};\n    padding-inline-start: ${select.padding};\n    padding-inline-end: calc(4 * ${base.spacing});\n\n    /* cSpell:disable-next-line */\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 25 25' fill='${foreground}'%3E%3Cpath d='M12.1476563,16.5726562 C12.1476563,16.5726562 3.2875,9.72421875 3.2875,9.72421875 C3.2875,9.72421875 3.14375,9.58046875 3.14375,9.58046875 C3.04765625,9.3890625 3,9.19765625 3,9.00546875 C3,9.00546875 3,9.00546875 3,9.00546875 C3,8.33515625 3.33515625,8 3.9578125,8 C3.9578125,8 3.9578125,8 3.9578125,8 C4.1015625,8 4.29296875,8.09609375 4.628125,8.2390625 C4.628125,8.2390625 4.628125,8.2390625 4.628125,8.2390625 C4.628125,8.2390625 12.8179688,14.2257813 12.8179688,14.2257813 C12.8179688,14.2257813 21.103125,8.19140625 21.103125,8.19140625 C21.3421875,8.04765625 21.534375,8 21.678125,8 C21.678125,8 21.678125,8 21.678125,8 C22.3007813,8 22.6359375,8.33515625 22.6359375,9.00546875 C22.6359375,9.00546875 22.6359375,9.00546875 22.6359375,9.00546875 C22.6359375,9.196875 22.5882813,9.38828125 22.4921875,9.58046875 C22.4921875,9.58046875 22.4921875,9.58046875 22.4921875,9.58046875 C22.4921875,9.58046875 22.3484375,9.72421875 22.3484375,9.72421875 C22.3484375,9.72421875 13.4882812,16.525 13.4882812,16.525 C13.296875,16.7164063 13.0570312,16.8125 12.8179688,16.8125 C12.8179688,16.8125 12.8179688,16.8125 12.8179688,16.8125 C12.5789062,16.8125 12.3867188,16.7164062 12.1476563,16.5734375 C12.1476563,16.5734375 12.1476563,16.5734375 12.1476563,16.5734375 L12.1476563,16.5726562 Z'/%3E%3C/svg%3E\");\n    background-repeat: no-repeat;\n    background-size: calc(2 * ${base.spacing}) auto;\n    background-position: ${rtl ? base.spacing : `calc(100% - ${base.spacing}) `} 60%;\n    border-width: ${select['border-width']};\n    border-radius: calc(${base['border-radius']} * ${select['border-radius']});\n\n    ${!props.status &&\n    css`\n      border-color: ${select['border-color']};\n    `}\n\n    &::-ms-expand {\n      display: none;\n    }\n\n    @media (pointer: coarse) {\n      min-height: ${base['hit-area']['finger-min']};\n    }\n  `;\n});\n\nStyledSelect.defaultProps = defaultThemeProp;\n\nconst Select: FunctionComponent<SelectProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<SelectProps>, ref: SelectProps['ref']) => {\n    const uid = useUID();\n    const {\n      children,\n      id = uid,\n      label,\n      labelHidden,\n      info,\n      status,\n      required = false,\n      disabled = false,\n      readOnly = false,\n      actions,\n      ...restProps\n    } = props;\n\n    const Comp = (\n      <StyledFormControl\n        {...restProps}\n        as={StyledSelect}\n        id={id}\n        status={status}\n        required={required}\n        disabled={disabled}\n        readOnly={readOnly}\n        aria-readonly={readOnly ? 'true' : undefined}\n        ref={ref}\n        onMouseDown={\n          readOnly\n            ? (e: MouseEvent<HTMLSelectElement>) => {\n                e.preventDefault();\n              }\n            : undefined\n        }\n        onKeyDown={\n          readOnly\n            ? (e: KeyboardEvent) => {\n                // TODO: FOr future consider key modifiers at play e.g. \"ctrl p\"\n                if (!['Escape', 'Tab'].includes(e.key)) e.preventDefault();\n              }\n            : undefined\n        }\n      >\n        {children}\n      </StyledFormControl>\n    );\n\n    return label ? (\n      <FormField\n        {...{\n          label,\n          labelHidden,\n          id,\n          info,\n          status,\n          required,\n          disabled,\n          readOnly,\n          actions\n        }}\n      >\n        {Comp}\n      </FormField>\n    ) : (\n      Comp\n    );\n  }\n);\n\nexport default Select;\n","import { FunctionComponent } from 'react';\n\nimport { BaseProps, ForwardProps } from '../../types';\n\nexport interface OptionProps extends BaseProps {\n  /** Text content for the Option. */\n  children: string;\n  /** Value associated with the Option. This value is passed to the Select onChange function. */\n  value?: string;\n}\n\nconst defaultProps: Partial<OptionProps> = {};\n\nconst Option: FunctionComponent<OptionProps & ForwardProps> = (props: OptionProps) => {\n  const { children, ...restProps } = props;\n  return <option {...restProps}>{children}</option>;\n};\n\nOption.defaultProps = defaultProps;\n\nexport default Option;\n","import type { ChangeEvent, FocusEvent } from 'react';\nimport { Select, Option } from '@pega/cosmos-react-core';\n\nexport default function Dropdown(props: any) {\n  const { field } = props;\n  return (\n    <Select\n      label={field.displaylabel}\n      value={field.displayvalue}\n      onChange={(e: ChangeEvent<HTMLSelectElement>) => {}}\n      onBlur={(e: FocusEvent<HTMLSelectElement>) => {}}\n    >\n      {field.options.map((item: any, index: number) => (\n        <Option key={`dropdown-${field.reference}-${index}`} value={item.key}>\n          {item.value}\n        </Option>\n      ))}\n    </Select>\n  );\n}\n"],"sourceRoot":""}