{"version":3,"file":"static/js/55868.5bcc6502.chunk.js","mappings":"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","sources":["../node_modules/@pega/cosmos-react-core/src/components/ComboBox/ComboBox.styles.ts","../node_modules/@pega/cosmos-react-core/src/components/ComboBox/MultiSelectInput/MultiSelectInput.tsx","../node_modules/@pega/cosmos-react-core/src/components/FieldGroup/FieldGroup.tsx","../node_modules/@pega/cosmos-react-core/src/components/Icon/icons/caret-up.icon.tsx","../node_modules/@pega/cosmos-react-core/src/hooks/useArrows.ts","../node_modules/@pega/cosmos-react-core/src/components/SummaryList/ViewAll.tsx","../node_modules/@pega/cosmos-react-core/src/components/Popover/modifiers.ts","../node_modules/@pega/cosmos-react-core/src/components/ComboBox/SingleSelectInput/SingleSelectInput.tsx","../node_modules/@pega/cosmos-react-core/src/components/ComboBox/ComboBoxInput.tsx","../node_modules/@pega/cosmos-react-core/src/components/ComboBox/ComboBox.tsx","../node_modules/@pega/cosmos-react-work/src/components/Stakeholders/StakeholderForm.tsx","../node_modules/@pega/cosmos-react-work/src/components/Stakeholders/Stakeholders.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport { StyledButton } from '../Button';\nimport { StyledFormControl } from '../FormControl';\nimport { StyledPopover } from '../Popover';\n\nexport const StyledSelectInput = styled.div(({ theme: { base, components } }) => {\n  return css`\n    @media (pointer: coarse) {\n      min-height: ${base['hit-area']['finger-min']};\n    }\n\n    &:focus-within {\n      border-color: ${components['form-control'][':focus']['border-color']};\n      box-shadow: ${components['form-control'][':focus']['box-shadow']};\n    }\n\n    &:hover:not([readonly]):not([disabled]):focus-within {\n      border-color: transparent;\n    }\n\n    input {\n      min-width: 0;\n      width: 100%;\n      height: calc(${components.input.height} - 2 * ${components['form-control']['border-width']});\n      color: ${components['form-control']['foreground-color']};\n      text-overflow: ellipsis;\n      margin-inline-start: ${base.spacing};\n    }\n\n    input,\n    input:focus {\n      border: none;\n      outline: none;\n      flex-grow: 1;\n      background-color: transparent;\n\n      &:read-only {\n        cursor: default;\n      }\n    }\n\n    & > ${StyledButton} {\n      align-self: stretch;\n      height: auto;\n      margin-block: -0.0625rem;\n      margin-inline-end: -0.0625rem;\n      border-start-start-radius: 0;\n      border-start-end-radius: calc(\n        ${base['border-radius']} * ${components['form-control']['border-radius']}\n      );\n      border-end-start-radius: 0;\n      border-end-end-radius: calc(\n        ${base['border-radius']} * ${components['form-control']['border-radius']}\n      );\n    }\n  `;\n});\n\nexport const StyledComboBox = styled(StyledFormControl)(() => {\n  return css`\n    border: 0;\n\n    ${StyledPopover} {\n      border-top-left-radius: 0;\n      border-top-right-radius: 0;\n    }\n  `;\n});\n\nStyledComboBox.defaultProps = defaultThemeProp;\n","import {\n  FunctionComponent,\n  forwardRef,\n  Ref,\n  PropsWithoutRef,\n  KeyboardEvent,\n  useRef,\n  useCallback\n} from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { ForwardProps } from '../../../types';\nimport { defaultThemeProp } from '../../../theme';\nimport Selectable, { StyledSelectable } from '../../Badges/Selection';\nimport { StyledFormControl } from '../../FormControl';\nimport Flex from '../../Flex';\nimport { useArrows, useConsolidatedRef, useDirection } from '../../../hooks';\nimport { cap } from '../../../utils';\nimport { StyledSelectInput } from '../ComboBox.styles';\n\nimport { MultiSelectInputProps } from './MultiSelectInput.types';\n\nexport const StyledMultiSelectInput = styled(StyledSelectInput)(({ theme }) => {\n  return css`\n    ul {\n      list-style: none;\n    }\n\n    ${StyledSelectable} {\n      margin: calc(0.25 * ${theme.base.spacing});\n    }\n  `;\n});\n\nStyledMultiSelectInput.defaultProps = defaultThemeProp;\n\nconst MultiSelectInput: FunctionComponent<MultiSelectInputProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<MultiSelectInputProps>, ref: Ref<HTMLInputElement>) => {\n    const {\n      selected = [],\n      value,\n      onRemove,\n      onChange,\n      onKeyDown,\n      actions,\n      readOnly,\n      disabled,\n      status,\n      placeholder,\n      autoFocus,\n      ...restProps\n    } = props;\n\n    const inputRef = useConsolidatedRef<HTMLInputElement>(ref);\n    const listRef = useRef<HTMLUListElement>(null);\n    useArrows(listRef, { selector: 'div[role=\"button\"], input', cycle: false, dir: 'left-right' });\n\n    const onInputKeyDown = useCallback(\n      (e: KeyboardEvent<HTMLInputElement>) => {\n        const lastIndex = selected.length - 1;\n        if (e.key === 'Backspace' && !value && selected.length > 0) {\n          onRemove?.(selected[lastIndex].id, lastIndex);\n        }\n        onKeyDown?.(e);\n      },\n      [onKeyDown, value, selected]\n    );\n\n    const { end } = useDirection();\n\n    return (\n      <Flex\n        as={StyledMultiSelectInput}\n        forwardedAs={StyledFormControl}\n        container={{ alignItems: 'center' }}\n        {...{\n          readOnly,\n          disabled,\n          status\n        }}\n      >\n        <Flex\n          ref={listRef}\n          as='ul'\n          item={{ grow: 1 }}\n          container={{ alignItems: 'center', wrap: 'wrap' }}\n          onBlur={() => {\n            listRef.current?.querySelectorAll<HTMLElement>('div[role=\"button\"]').forEach(el => {\n              el.tabIndex = -1;\n            });\n            if (inputRef.current) inputRef.current.tabIndex = 0;\n          }}\n        >\n          {selected.map((element, idx) => {\n            return (\n              <li key={element.id}>\n                <Selectable\n                  id={element.id.toString()}\n                  disabled={readOnly || disabled}\n                  status={status}\n                  onRemove={id => {\n                    onRemove?.(id, idx);\n                    inputRef.current?.focus();\n                  }}\n                  onKeyDown={(e: KeyboardEvent<Element>) => {\n                    // prevent browser's Back on FF\n                    if (e.key === 'Backspace') e.preventDefault();\n                    if (idx === selected.length - 1 && e.key === `Arrow${cap(end)}`)\n                      inputRef.current?.focus();\n                  }}\n                >\n                  {element.text}\n                </Selectable>\n              </li>\n            );\n          })}\n          <Flex as='li' item={{ grow: 1 }} container>\n            <input\n              size={5}\n              ref={inputRef}\n              value={value}\n              // no-op avoids react uncontrolled warning\n              onChange={onChange || (() => {})}\n              onKeyDown={onInputKeyDown}\n              readOnly={readOnly || !onChange}\n              placeholder={selected?.length ? undefined : placeholder}\n              autoComplete='off'\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus={autoFocus}\n              {...restProps}\n            />\n          </Flex>\n        </Flex>\n        {actions}\n      </Flex>\n    );\n  }\n);\n\nexport default MultiSelectInput;\n","import { forwardRef, useState, FunctionComponent, PropsWithoutRef, Ref, ReactNode } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Button, { StyledButton } from '../Button';\nimport ExpandCollapse from '../ExpandCollapse';\nimport Flex from '../Flex';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as caretRightIcon from '../Icon/icons/caret-right.icon';\nimport Actions, { ActionsProps } from '../Actions';\nimport { defaultThemeProp } from '../../theme';\nimport { BaseProps, ForwardProps } from '../../types';\nimport { useI18n } from '../../hooks';\nimport { calculateFontSize, FontSize } from '../../styles';\n\nregisterIcon(caretRightIcon);\n\nexport interface FieldGroupProps extends BaseProps {\n  /** The content of the Field Group. */\n  children: ReactNode;\n  /**\n   * If true, the Field Group will be able to collapse the content of its children by clicking on the name.\n   * @default false\n   */\n  collapsible?: boolean;\n  /**\n   * If true, the Field Group will be collapsed on the first render.\n   * @default false\n   */\n  defaultCollapsed?: boolean;\n  /** The name associated with the Field Group. */\n  name?: string;\n  /** An array of actions to add to the header. */\n  actions?: ActionsProps['items'];\n  /** A reference to the wrapping element. */\n  ref?: Ref<HTMLFieldSetElement>;\n}\n\ninterface FieldGroupLegendProps {\n  open: boolean;\n  actions?: ActionsProps['items'];\n  children?: ReactNode;\n}\n\nexport const StyledFieldGroupLegend = styled.legend<{ open: boolean }>(\n  ({\n    open,\n    theme: {\n      base: { spacing, animation }\n    }\n  }) => css`\n    width: 100%;\n    margin-bottom: 0;\n    ${open &&\n    css`\n      margin-block-end: ${spacing};\n    `}\n    transition: margin-block-end ${animation.speed} ${animation.timing.ease};\n\n    button ${StyledIcon} {\n      transition: transform ${animation.speed} ${animation.timing.ease};\n    }\n\n    button[aria-expanded='true'] ${StyledIcon} {\n      transform: rotate(90deg);\n    }\n    button[aria-expanded='false'] ${StyledIcon} {\n      transform: rotate(0);\n    }\n  `\n);\n\nStyledFieldGroupLegend.defaultProps = defaultThemeProp;\n\nexport const StyledFieldGroup = styled.fieldset(\n  ({\n    theme: {\n      base: { 'font-size': fontSize, 'font-scale': fontScale },\n      components: { text }\n    }\n  }) => {\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n\n    return css`\n      border: none;\n\n      ${StyledFieldGroupLegend} ${StyledButton} {\n        font-weight: inherit;\n      }\n\n      & ${StyledFieldGroupLegend} {\n        font-size: ${fontSizes[text.h3['font-size'] as FontSize]};\n        font-weight: ${text.h3['font-weight']};\n      }\n\n      & & ${StyledFieldGroupLegend} {\n        font-size: ${fontSizes[text.h4['font-size'] as FontSize]};\n        font-weight: ${text.h4['font-weight']};\n      }\n\n      & & & ${StyledFieldGroupLegend} {\n        font-size: ${fontSizes[text.h5['font-size'] as FontSize]};\n        font-weight: ${text.h5['font-weight']};\n      }\n\n      & & & & ${StyledFieldGroupLegend} {\n        font-size: ${fontSizes[text.h6['font-size'] as FontSize]};\n        font-weight: ${text.h6['font-weight']};\n      }\n    `;\n  }\n);\n\nStyledFieldGroup.defaultProps = defaultThemeProp;\n\nconst FieldGroupLegend: FunctionComponent<FieldGroupLegendProps> = ({\n  children,\n  open,\n  actions,\n  ...restProps\n}) => {\n  return (\n    <StyledFieldGroupLegend open={open} {...restProps}>\n      <Flex container={{ alignItems: 'center', justify: 'between' }}>\n        {children}\n        {actions && <Actions items={actions} />}\n      </Flex>\n    </StyledFieldGroupLegend>\n  );\n};\n\nconst FieldGroup: FunctionComponent<FieldGroupProps & ForwardProps> = forwardRef(\n  (\n    {\n      children,\n      name,\n      actions,\n      collapsible = false,\n      defaultCollapsed = false,\n      ...restProps\n    }: PropsWithoutRef<FieldGroupProps>,\n    ref: FieldGroupProps['ref']\n  ) => {\n    const [open, setOpen] = useState(!defaultCollapsed);\n    const t = useI18n();\n\n    return (\n      <StyledFieldGroup aria-label={name} {...restProps} ref={ref}>\n        {name && (\n          <FieldGroupLegend open={open} actions={actions}>\n            {collapsible ? (\n              <Button\n                type='button'\n                variant='text'\n                onClick={() => {\n                  setOpen(cur => !cur);\n                }}\n                aria-expanded={open ? 'true' : 'false'}\n                aria-label={t(open ? 'collapse_noun' : 'expand_noun', [name])}\n              >\n                <Flex\n                  container={{ direction: 'row', alignItems: 'center', gap: 0.5 }}\n                  forwardedAs='span'\n                >\n                  <Icon name='caret-right' />\n                  <span>{name}</span>\n                </Flex>\n              </Button>\n            ) : (\n              <span>{name}</span>\n            )}\n          </FieldGroupLegend>\n        )}\n        {collapsible ? <ExpandCollapse collapsed={!open}>{children}</ExpandCollapse> : children}\n      </StyledFieldGroup>\n    );\n  }\n);\n\nexport default FieldGroup;\n","// This file is autogenerated. Any changes will be overwritten.\nexport const name = 'caret-up';\n\nexport const Component = () => (\n  <path d='M13.4882812,8.23984375 C13.4882812,8.23984375 22.3484375,15.0882812 22.3484375,15.0882812 C22.3484375,15.0882812 22.4921875,15.2320313 22.4921875,15.2320313 C22.5882813,15.4234375 22.6359375,15.6148437 22.6359375,15.8070313 C22.6359375,15.8070313 22.6359375,15.8070313 22.6359375,15.8070313 C22.6359375,16.4773438 22.3007813,16.8125 21.678125,16.8125 C21.678125,16.8125 21.678125,16.8125 21.678125,16.8125 C21.534375,16.8125 21.3429688,16.7164062 21.0078125,16.5734375 C21.0078125,16.5734375 21.0078125,16.5734375 21.0078125,16.5734375 C21.0078125,16.5734375 12.8179688,10.5867187 12.8179688,10.5867187 C12.8179688,10.5867187 4.5328125,16.6210938 4.5328125,16.6210938 C4.29375,16.7648438 4.1015625,16.8125 3.9578125,16.8125 C3.9578125,16.8125 3.9578125,16.8125 3.9578125,16.8125 C3.33515625,16.8125 3,16.4773438 3,15.8070313 C3,15.8070313 3,15.8070313 3,15.8070313 C3,15.615625 3.04765625,15.4242188 3.14375,15.2320313 C3.14375,15.2320313 3.14375,15.2320313 3.14375,15.2320313 C3.14375,15.2320313 3.2875,15.0882812 3.2875,15.0882812 C3.2875,15.0882812 12.1476563,8.2875 12.1476563,8.2875 C12.3390625,8.09609375 12.5789062,8 12.8179688,8 C12.8179688,8 12.8179688,8 12.8179688,8 C13.0570312,8 13.2492188,8.09609375 13.4882812,8.2390625 C13.4882812,8.2390625 13.4882812,8.2390625 13.4882812,8.2390625 L13.4882812,8.23984375 Z' />\n);\n\nexport const viewBox = '0 0 25 25';\n","import { useEffect, useCallback, RefObject } from 'react';\n\nimport { documentIsAvailable } from '../utils';\n\nconst focusable = `\n  a[href],\n  button:enabled,\n  input[type='checkbox']:enabled,\n  input[type='radio']:enabled\n`;\n\n/**\n * @example useArrows(ref, { cycle, selector });\n * @param ref - A reference to the element that will be navigated through. [React RefObject](https://reactjs.org/docs/refs-and-the-dom.html)\n */\nconst useArrows = (\n  ref: RefObject<HTMLElement>,\n  {\n    /** If true, the down or up arrow key will navigate to the first or last element if the element currently focused is the last or first index of the selected elements. */\n    cycle = true,\n    /** A query selector that will determine which elements to cycle through with the arrow keys. The selector will be used in conjunction with [querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll#selectors). */\n    selector = focusable,\n    /** Which keys are used to navigate through the list */\n    dir = 'up-down'\n  }: { cycle?: boolean; selector?: string; dir?: 'up-down' | 'left-right' } = {}\n) => {\n  const [NextKey, PrevKey] =\n    dir === 'up-down' ? ['ArrowDown', 'ArrowUp'] : ['ArrowRight', 'ArrowLeft'];\n\n  const setTabIndexes = useCallback(\n    (el: HTMLElement) => {\n      // don't set tabindex -1 for first element, or an element with a checked input inside of it to be able to focus it\n      Array.from(el.querySelectorAll(selector))\n        .slice(1)\n        .forEach(item => {\n          if (item instanceof HTMLElement) {\n            const checked = (item as HTMLInputElement).checked;\n            if (!checked) item.tabIndex = -1;\n          }\n        });\n    },\n    [selector]\n  );\n\n  const listener = useCallback(\n    (e: KeyboardEvent) => {\n      if (['Home', 'End', NextKey, PrevKey].includes(e.key)) e.preventDefault();\n\n      if (!documentIsAvailable) return;\n\n      const el = ref.current;\n      if (!el) return;\n\n      const items = Array.from(el.querySelectorAll(selector)).filter(\n        (item): item is HTMLElement => item instanceof HTMLElement\n      );\n\n      if (!items.length) return;\n\n      const rootNode = el.getRootNode();\n\n      if (!(rootNode instanceof Document) && !(rootNode instanceof ShadowRoot)) return;\n\n      const focusIdx = items.indexOf(rootNode.activeElement as HTMLElement);\n      const lastIdx = items.length - 1;\n      let newFocusIdx;\n\n      if (e.key === 'Home' || (e.key === NextKey && focusIdx === -1)) {\n        newFocusIdx = 0;\n      } else if (e.key === 'End' || (e.key === PrevKey && focusIdx === -1)) {\n        newFocusIdx = lastIdx;\n      } else if (e.key === 'Enter') {\n        setTabIndexes(el);\n        return;\n      } else if (e.key === NextKey) {\n        if (focusIdx === lastIdx) {\n          if (!cycle) return;\n          newFocusIdx = 0;\n        } else {\n          newFocusIdx = focusIdx + 1;\n        }\n      } else if (e.key === PrevKey) {\n        if (focusIdx === 0) {\n          if (!cycle) return;\n          newFocusIdx = lastIdx;\n        } else {\n          newFocusIdx = focusIdx - 1;\n        }\n      } else {\n        return;\n      }\n\n      items[newFocusIdx].focus();\n    },\n    [ref.current, cycle, selector]\n  );\n\n  useEffect(() => {\n    const el = ref.current;\n    if (!el) return;\n\n    setTabIndexes(el);\n    el.addEventListener('keydown', listener);\n\n    return () => {\n      el.removeEventListener('keydown', listener);\n    };\n  }, [ref.current, selector, listener]);\n};\n\nexport default useArrows;\n","import { forwardRef, Ref, FC } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Actions from '../Actions';\nimport Flex from '../Flex';\nimport EmptyState from '../EmptyState';\nimport SearchInput, { SearchInputProps, StyledSearchInput } from '../SearchInput';\nimport { defaultThemeProp } from '../../theme';\nimport Progress from '../Progress';\nimport { StyledCard } from '../Card';\nimport { StyledCardContent } from '../Card/CardContent';\nimport { omitProps } from '../../styles';\nimport type { ForwardProps } from '../../types';\n\nimport SummaryList, { SummaryListProps } from './SummaryList';\n\nexport interface ViewAllProps extends Pick<SummaryListProps, 'loading' | 'actions' | 'items'> {\n  searchInputProps?: SearchInputProps;\n  ref?: Ref<HTMLDivElement>;\n}\n\nconst StyledToolbar = styled.div(({ theme: { base } }) => {\n  return css`\n    position: sticky;\n    top: 0;\n    z-index: 1;\n    background-color: ${base.palette['primary-background']};\n    margin-bottom: ${base.spacing};\n    transform: translateY(calc(-0.5 * ${base.spacing}));\n    padding: ${base.spacing} 0;\n\n    ${StyledSearchInput} {\n      flex-grow: 1;\n    }\n  `;\n});\n\nStyledToolbar.defaultProps = defaultThemeProp;\n\nexport const StyledViewAll = styled.div.withConfig<{ loading: ViewAllProps['loading'] }>(\n  omitProps('loading')\n)(\n  ({ loading }) => css`\n    ${StyledCardContent}:not(${StyledCard} ${StyledCard} > ${StyledCardContent}) {\n      padding: 0;\n    }\n\n    ${loading &&\n    css`\n      min-height: 8rem;\n    `}\n  `\n);\n\nconst SearchableList: FC<ViewAllProps & ForwardProps> = forwardRef(\n  ({ loading, actions, items, searchInputProps, ...restProps }, ref: ViewAllProps['ref']) => {\n    return (\n      <StyledViewAll ref={ref} loading={loading} {...restProps}>\n        {!loading && (searchInputProps || actions) && (\n          <Flex container={{ justify: 'between', alignItems: 'center', gap: 2 }} as={StyledToolbar}>\n            {searchInputProps && (\n              <Flex container={{ alignItems: 'center', gap: 1 }} item={{ grow: 1 }}>\n                <SearchInput onSearchChange={searchInputProps.onSearchChange} />\n              </Flex>\n            )}\n            {actions && <Actions iconOnly={false} items={actions} />}\n          </Flex>\n        )}\n\n        {loading && <Progress placement='local' />}\n        {!loading && (items.length ? <SummaryList items={items} /> : <EmptyState />)}\n      </StyledViewAll>\n    );\n  }\n);\n\nexport default SearchableList;\n","import { Modifier } from '@popperjs/core';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const sameWidth: Modifier<'sameWidth', object> = Object.freeze({\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn({ state }) {\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  requires: ['computeStyles']\n});\n","import { forwardRef, FunctionComponent, PropsWithoutRef, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../../theme';\nimport { StyledFormControl } from '../../FormControl';\nimport Flex from '../../Flex';\nimport { ForwardProps } from '../../../types';\nimport { StyledSelectInput } from '../ComboBox.styles';\n\nimport SingleSelectInputProps from './SingleSelectInput.types';\n\nexport const StyledSingleSelectInput = styled(StyledSelectInput)``;\n\nconst StyledVisualContainer = styled.span(props => {\n  const {\n    theme: {\n      base,\n      components: {\n        'form-control': formControl,\n        input: { height }\n      }\n    }\n  } = props;\n\n  return css`\n    border-inline-end: ${formControl['border-width']} solid ${formControl['border-color']};\n    min-width: calc(${height} - ${formControl['border-width']});\n    padding: 0 calc(0.5 * ${base.spacing});\n    height: calc(${height} - 2 * ${formControl['border-width']});\n  `;\n});\n\nStyledVisualContainer.defaultProps = defaultThemeProp;\n\nconst SingleSelectInput: FunctionComponent<SingleSelectInputProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<SingleSelectInputProps>, ref: Ref<HTMLInputElement>) => {\n    const { value, readOnly, disabled, status, actions, onChange, selected, visual, ...restProps } =\n      props;\n\n    return (\n      <Flex\n        as={StyledSingleSelectInput}\n        forwardedAs={StyledFormControl}\n        container={{ alignItems: 'center', wrap: 'nowrap' }}\n        {...{\n          disabled,\n          status,\n          readOnly\n        }}\n      >\n        {visual && (\n          <Flex container={{ justify: 'center', alignItems: 'center' }} as={StyledVisualContainer}>\n            {visual}\n          </Flex>\n        )}\n        <input\n          {...{\n            ref,\n            disabled,\n            status,\n            readOnly\n          }}\n          value={value || selected?.text || ''}\n          // no-op avoids react uncontrolled warning\n          onChange={onChange || (() => {})}\n          readOnly={readOnly || !onChange}\n          autoComplete='off'\n          {...restProps}\n        />\n        {actions}\n      </Flex>\n    );\n  }\n);\n\nexport default SingleSelectInput;\n","import { forwardRef, FunctionComponent, Ref, PropsWithoutRef } from 'react';\n\nimport { BaseProps, ForwardProps } from '../../types';\nimport { MenuItemProps } from '../Menu/Menu.types';\n\nimport SingleSelectInput from './SingleSelectInput/SingleSelectInput';\nimport MultiSelectInput from './MultiSelectInput/MultiSelectInput';\nimport ComboBoxProps, { Selected } from './ComboBox.types';\n\ninterface ComboBoxInputProps extends BaseProps {\n  mode?: 'multi-select' | 'single-select';\n  selected?: Selected | Selected[];\n  value?: ComboBoxProps['value'];\n  visual?: ComboBoxProps['visual'];\n  onRemove?: (id: MenuItemProps['id'], index: number) => void;\n}\n\nconst ComboBoxInput: FunctionComponent<ComboBoxInputProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<ComboBoxInputProps>, ref: Ref<HTMLInputElement>) => {\n    const { value, mode, selected, visual, onRemove, ...restProps } = props;\n\n    return mode === 'multi-select' ? (\n      <MultiSelectInput\n        selected={selected as Selected[]}\n        value={value}\n        {...{\n          ref,\n          onRemove\n        }}\n        {...restProps}\n      />\n    ) : (\n      <SingleSelectInput\n        ref={ref}\n        selected={selected as Selected}\n        value={value}\n        visual={visual}\n        {...restProps}\n      />\n    );\n  }\n);\n\nexport default ComboBoxInput;\n","import {\n  forwardRef,\n  FunctionComponent,\n  KeyboardEvent as ReactKeyboardEvent,\n  PropsWithoutRef,\n  Ref,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\n\nimport Icon, { registerIcon } from '../Icon';\nimport * as caretDownIcon from '../Icon/icons/caret-down.icon';\nimport * as caretUpIcon from '../Icon/icons/caret-up.icon';\nimport { ForwardProps } from '../../types';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nimport { useConsolidatedRef, useFocusWithin, useI18n, useUID, useElement } from '../../hooks';\nimport Popover from '../Popover';\nimport FormField from '../FormField';\nimport { StyledFormControl } from '../FormControl';\nimport Menu, { MenuProps } from '../Menu';\nimport Button from '../Button';\nimport { navigatorIsAvailable } from '../../utils';\nimport menuHelpers from '../Menu/helpers';\nimport { sameWidth } from '../Popover/modifiers';\n\nimport ComboBoxInput from './ComboBoxInput';\nimport ComboBoxProps from './ComboBox.types';\nimport { StyledComboBox } from './ComboBox.styles';\n\nregisterIcon(caretDownIcon, caretUpIcon);\n\nconst isMobile = navigatorIsAvailable && navigator.userAgent.includes('Mobile');\n\nconst ComboBox: FunctionComponent<ComboBoxProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<ComboBoxProps>, ref: Ref<HTMLDivElement>) => {\n    const uid = useUID();\n    const {\n      value,\n      required,\n      id = uid,\n      label,\n      labelHidden,\n      info,\n      status,\n      readOnly,\n      disabled,\n      mode = 'single-select',\n      selected,\n      onChange,\n      actions,\n      onFocus,\n      onBlur,\n      onDropdownButtonClick: onDropdownButtonClickProp,\n      onClick,\n      menu,\n      ...restProps\n    } = props;\n\n    const t = useI18n();\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [open, setOpen] = useState(false);\n    const menuRef: MenuProps['ref'] = useRef(null);\n    const menuComponentId = `${id}-listbox`;\n\n    // Force a re-render to make sure useFocusWithin has valid elements to set listeners on.\n    const [, setContainerEl] = useElement();\n    const containerRef = useConsolidatedRef<HTMLDivElement>(ref, setContainerEl);\n\n    const focus = useFocusWithin([containerRef], focused => {\n      if (!focused) {\n        setOpen(false);\n        onBlur?.(selected?.items);\n      } else {\n        onFocus?.(selected?.items);\n        if (isMobile) {\n          setTimeout(() => {\n            containerRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n          }, 150); // delay it to let keyboard expand first\n        }\n      }\n    });\n\n    const onInputKeyDown = useCallback(\n      (e: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (!menu || readOnly) return;\n        switch (e.key) {\n          case 'ArrowDown':\n            e.preventDefault();\n            if (!open) setOpen(true);\n            break;\n          case 'Escape':\n            e.preventDefault();\n            if (open) e.stopPropagation();\n            setOpen(false);\n            break;\n          default:\n        }\n      },\n      [open, readOnly, menu, value]\n    );\n\n    const onDropdownButtonClick = useCallback(() => {\n      onDropdownButtonClickProp?.(!open);\n      setOpen(!open);\n    }, [open, onDropdownButtonClickProp]);\n\n    const dropdownButton = useMemo(() => {\n      return (menu?.items?.length || onDropdownButtonClickProp || !onChange) && !readOnly ? (\n        <Button\n          aria-hidden='true'\n          aria-label={t(\n            open ? 'combobox_close_list_button_a11y' : 'combobox_open_list_button_a11y'\n          )}\n          icon\n          variant='simple'\n          onClick={onDropdownButtonClick}\n          onMouseDown={(e: MouseEvent) => {\n            e.preventDefault();\n            inputRef.current?.focus();\n          }}\n          disabled={disabled}\n          tabIndex='-1'\n        >\n          <Icon name={open ? 'caret-up' : 'caret-down'} />\n        </Button>\n      ) : null;\n    }, [onDropdownButtonClick, onChange, readOnly, open, disabled]);\n\n    const onInputClick = useCallback(\n      (e: MouseEvent) => {\n        if (readOnly) return;\n        setOpen(true);\n        onClick?.(e);\n      },\n      [readOnly, onClick]\n    );\n\n    useEffect(() => {\n      if (focus && menu && value && value.length > 0) {\n        setOpen(true);\n      }\n    }, [menu, value, focus]);\n\n    // Workaround for the following error from jsx-ast-utils, fixed in version 3.5.0.\n    // The prop value with an expression type of JSXFragment could not be resolved. Please file issue to get this fixed immediately.\n    const inputActions = (\n      <>\n        {dropdownButton}\n        {actions}\n      </>\n    );\n\n    const Comp = (\n      <StyledComboBox ref={containerRef} as={StyledFormControl} id={`${id}-combobox`}>\n        <ComboBoxInput\n          ref={inputRef}\n          role='combobox'\n          aria-haspopup='listbox'\n          aria-expanded={!readOnly && !disabled && open}\n          aria-autocomplete='list'\n          aria-describedby={`${id}-inputDescription`}\n          selected={selected?.items}\n          spellCheck={false}\n          {...{\n            id,\n            readOnly,\n            disabled,\n            onChange,\n            value,\n            mode,\n            status\n          }}\n          actions={inputActions}\n          onRemove={selected?.onRemove}\n          onClick={onInputClick}\n          onKeyDown={onInputKeyDown}\n          {...restProps}\n        />\n\n        <VisuallyHiddenText id={`${id}-inputDescription`}>\n          {`${t('combobox_open_close')} ` && onChange ? t('combobox_search_instructions') : ''}\n        </VisuallyHiddenText>\n\n        <Popover\n          show={open && menu !== undefined}\n          target={containerRef.current}\n          placement='bottom-start'\n          modifiers={[\n            {\n              name: 'flip',\n              options: {\n                fallbackPlacements: ['top-start']\n              }\n            },\n            sameWidth\n          ]}\n          strategy={isMobile ? 'absolute' : 'fixed'}\n          onMouseDown={(e: MouseEvent) => e.preventDefault()}\n        >\n          {menu && (\n            <Menu\n              ref={menuRef}\n              id={menuComponentId}\n              role='listbox'\n              mode={mode}\n              {...menu}\n              items={menu.items}\n              focusControlEl={inputRef.current || undefined}\n              onItemClick={(itemId, e) => {\n                if (mode === 'single-select') {\n                  setOpen(false);\n                }\n                menu.onItemClick?.(itemId, e);\n\n                const clickedItem = menuHelpers.getItem(menu.items, itemId);\n\n                if (clickedItem?.primary && !clickedItem?.selected) {\n                  selected?.onNew?.(clickedItem?.primary);\n                }\n              }}\n              arrowNavigationUnsupported\n            />\n          )}\n        </Popover>\n      </StyledComboBox>\n    );\n\n    return label ? (\n      <FormField {...{ label, labelHidden, id, info, status, required, disabled }}>\n        {Comp}\n      </FormField>\n    ) : (\n      Comp\n    );\n  }\n);\n\nexport default ComboBox;\n","import { useEffect, useRef, useState } from 'react';\n\nimport {\n  ComboBox,\n  RadioButtonGroup,\n  RadioButton,\n  Flex,\n  useI18n,\n  Input,\n  getFocusables\n} from '@pega/cosmos-react-core';\n\nimport type { Role, StakeholdersProps } from './Stakeholders.types';\n\ninterface FormProps\n  extends Pick<StakeholdersProps['form'], 'roles' | 'currentRole' | 'renderer' | 'rendererProps'> {\n  setSelectedRoleNameRef: (selectedRoleName?: string | undefined) => void;\n}\n\nexport default ({\n  roles,\n  currentRole,\n  renderer: Renderer,\n  rendererProps,\n  setSelectedRoleNameRef\n}: FormProps) => {\n  const contentRef = useRef<HTMLElement>(null);\n  const t = useI18n();\n\n  const [selectedRoleName, setSelectedRoleName] = useState<Role['name'] | undefined>(() => {\n    if (roles) {\n      return (currentRole ? roles.find(role => role.name === currentRole.name) : roles[0])?.name;\n    }\n  });\n\n  let control: JSX.Element | null = null;\n\n  if (roles) {\n    const label = t('stakeholders_role');\n\n    if (roles.length > 3) {\n      const items = roles.map(role => {\n        return {\n          id: role.name,\n          primary: role.name,\n          selected: role.name === selectedRoleName\n        };\n      });\n\n      const selected = items.find(item => item.selected);\n\n      control = (\n        <ComboBox\n          label={label}\n          selected={selected ? { items: { id: selected.id, text: selected.primary } } : undefined}\n          menu={{\n            mode: 'single-select',\n            items,\n            onItemClick: setSelectedRoleName\n          }}\n        />\n      );\n    } else {\n      control = (\n        <RadioButtonGroup\n          label={label}\n          name='role'\n          inline\n          onChange={e => {\n            setSelectedRoleName(e.target.value);\n          }}\n        >\n          {roles.map(role => (\n            <RadioButton\n              key={role.name}\n              label={role.name}\n              value={role.name}\n              checked={role.name === selectedRoleName}\n            />\n          ))}\n        </RadioButtonGroup>\n      );\n    }\n  } else if (currentRole) {\n    control = (\n      <Input\n        readOnly\n        label={t('stakeholders_role')}\n        value={currentRole.name}\n        info={currentRole.description}\n      />\n    );\n  }\n\n  useEffect(() => {\n    getFocusables(contentRef)[0]?.focus();\n  }, []);\n\n  useEffect(() => {\n    if (!roles) return;\n    setSelectedRoleNameRef(selectedRoleName);\n  }, [selectedRoleName]);\n\n  return (\n    <Flex container={{ direction: 'column', gap: 2 }} ref={contentRef}>\n      {control}\n      <Renderer {...rendererProps} selectedRoleName={selectedRoleName} />\n    </Flex>\n  );\n};\n","import {\n  forwardRef,\n  FunctionComponent,\n  PropsWithoutRef,\n  useContext,\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  ReactNode,\n  useCallback\n} from 'react';\nimport styled from 'styled-components';\nimport { createPortal } from 'react-dom';\n\nimport {\n  SummaryList,\n  ModalManagerContext,\n  useI18n,\n  ModalMethods,\n  Button,\n  ViewAll,\n  Modal,\n  Popover,\n  Flex,\n  Text,\n  useOuterEvent,\n  Progress,\n  useAfterInitialEffect\n} from '@pega/cosmos-react-core';\nimport type { Action, ForwardProps, ModalProps, OmitStrict } from '@pega/cosmos-react-core';\n\nimport type { Role, StakeholdersProps } from './Stakeholders.types';\nimport StakeholderForm from './StakeholderForm';\n\nconst StyledStakeholders = styled(SummaryList)``;\n\nconst StyledEditFormWrap = styled.div`\n  position: relative;\n  min-height: 8rem;\n\n  &[aria-busy='true'] > :nth-child(2) {\n    visibility: hidden;\n  }\n`;\n\nconst StyledPopover = styled(Popover)`\n  width: 40ch;\n  min-height: 12rem;\n`;\n\nconst Stakeholders: FunctionComponent<StakeholdersProps & ForwardProps> = forwardRef(\n  (\n    {\n      items: itemsProp,\n      count,\n      loading,\n      onAddNew,\n      form,\n      onViewAll,\n      viewAll,\n      error,\n      ...restProps\n    }: PropsWithoutRef<StakeholdersProps>,\n    ref: StakeholdersProps['ref']\n  ) => {\n    const { create: createModal } = useContext(ModalManagerContext);\n    const t = useI18n();\n    const modalMethods = useRef<ModalMethods>();\n    const [mode, setMode] = useState<undefined | 'add' | 'viewAll'>();\n    const [editing, setEditing] = useState(false);\n    const popoverRef = useRef<HTMLDivElement>(null);\n    const progressMsgRef = useRef(t('loading'));\n\n    // Why? Don't think this should trigger a re-render. We just need the value when we invoke callback props.\n    const selectedRoleNameRef = useRef<Role['name'] | undefined>();\n    // Setter for the ref. Avoids a re-render.\n    const setSelectedRoleNameRef = useCallback((selectedRoleName?: Role['name']) => {\n      selectedRoleNameRef.current = selectedRoleName;\n    }, []);\n\n    const [popoverTarget, setPopoverTarget] = useState<{\n      portal: HTMLLIElement;\n      button: HTMLButtonElement | null;\n    } | null>(null);\n\n    const itemElsRef = useRef<{ itemEls: HTMLLIElement[]; viewAllItemEls: HTMLLIElement[] }>({\n      itemEls: [],\n      viewAllItemEls: []\n    });\n\n    // This function merges the pre-defined actions(add & edit) to the item object.\n    const mergeItemActions = (\n      items: StakeholdersProps['items'] | NonNullable<StakeholdersProps['viewAll']>['items']\n    ) => {\n      return items.map(({ onEdit, onRemove, ...rest }, i) => {\n        let itemActions: Action[] = [];\n        const elArray = itemElsRef.current[mode === 'viewAll' ? 'viewAllItemEls' : 'itemEls'];\n\n        if (onEdit) {\n          itemActions = [\n            {\n              id: 'edit',\n              text: t('edit'),\n              icon: 'pencil',\n              onClick: () => {\n                setEditing(true);\n                setPopoverTarget({\n                  portal: elArray[i],\n                  button: elArray[i].querySelector<HTMLButtonElement>(\n                    'button[aria-haspopup=\"menu\"]'\n                  )\n                });\n\n                onEdit?.();\n              }\n            }\n          ];\n        }\n\n        if (onRemove) {\n          itemActions = [\n            ...itemActions,\n            {\n              id: 'remove',\n              text: t('remove'),\n              icon: 'trash',\n              onClick: () => {\n                onRemove?.();\n              }\n            }\n          ];\n        }\n\n        return {\n          ...rest,\n          ref: (el: HTMLLIElement) => {\n            elArray[i] = el;\n          },\n          actions: itemActions\n        };\n      });\n    };\n\n    const closePopover = () => {\n      if (!popoverTarget || (form.loading && progressMsgRef.current === t('submitting'))) return;\n      popoverTarget.button?.focus();\n      setPopoverTarget(null);\n      setEditing(false);\n      progressMsgRef.current = t('loading');\n    };\n\n    let formContent: ReactNode = null;\n    if (\n      (mode === 'add' || editing) &&\n      (!form.loading || progressMsgRef.current === t('submitting'))\n    ) {\n      formContent = (\n        <StakeholderForm\n          roles={form.roles}\n          currentRole={form.currentRole}\n          renderer={form.renderer}\n          rendererProps={form.rendererProps}\n          setSelectedRoleNameRef={setSelectedRoleNameRef}\n        />\n      );\n    }\n\n    // Actions used for add and edit both in the modal and the popover.\n    let formActions: ReactNode = null;\n    if (\n      (mode === 'add' || editing) &&\n      (!form.loading || progressMsgRef.current === t('submitting'))\n    ) {\n      const closeForm = () => {\n        if (mode === 'add') {\n          modalMethods.current?.dismiss();\n        } else {\n          closePopover();\n        }\n      };\n\n      formActions = (\n        <>\n          <Button\n            disabled={form.loading}\n            onClick={() => {\n              form.onDismiss({ closeForm });\n            }}\n          >\n            {t('cancel')}\n          </Button>\n          <Button\n            disabled={form.loading}\n            type='submit'\n            variant='primary'\n            onClick={() => {\n              progressMsgRef.current = t('submitting');\n              form.onSubmit({\n                selectedRoleName: selectedRoleNameRef.current,\n                closeForm\n              });\n            }}\n          >\n            {t('submit')}\n          </Button>\n        </>\n      );\n    }\n\n    // Content for the modal either for adding new or viewing all.\n    let modalContent: ReactNode = null;\n    if (mode === 'add') modalContent = formContent;\n\n    if (!viewAll.loading && (mode === 'viewAll' || (editing && modalMethods.current))) {\n      modalContent = (\n        <ViewAll\n          items={mergeItemActions(viewAll.items)}\n          actions={[\n            {\n              id: 'addStakeHolder',\n              text: 'Add new',\n              onClick: () => {\n                setMode('add');\n                onAddNew?.();\n              }\n            }\n          ]}\n          searchInputProps={\n            viewAll.onSearch\n              ? {\n                  onSearchChange: viewAll.onSearch\n                }\n              : undefined\n          }\n        />\n      );\n    }\n\n    useEffect(() => {\n      if (!mode) {\n        modalMethods.current = undefined;\n        return;\n      }\n\n      const modalProps: OmitStrict<ModalProps, 'heading'> = {\n        progress:\n          (mode === 'add' && form.loading) || viewAll.loading\n            ? { message: progressMsgRef.current }\n            : undefined,\n        count: mode === 'viewAll' ? count : undefined,\n        children: modalContent,\n        actions: mode === 'add' ? formActions : undefined,\n        onRequestDismiss:\n          form.loading && progressMsgRef.current === t('submitting') ? () => false : undefined\n      };\n\n      if (modalMethods.current) {\n        modalMethods.current.update(modalProps);\n      } else if (mode === 'add' || mode === 'viewAll') {\n        modalMethods.current = createModal(Modal, {\n          ...modalProps,\n          heading: mode === 'add' ? t('add_stakeholders') : t('view_stakeholders'),\n          onAfterClose: () => {\n            if (mode === 'add') {\n              form.onAfterClose?.();\n            } else {\n              viewAll.onAfterClose?.();\n            }\n\n            progressMsgRef.current = t('loading');\n            setMode(undefined);\n          }\n        });\n      }\n    }, [mode, modalContent, form.loading, formActions, count, viewAll.loading]);\n\n    // Using mousedown instead of click since drag selecting an input's value within the popover, then releasing outside the popover triggers outer click.\n    useOuterEvent('mousedown', [popoverRef], closePopover);\n\n    let editPopover: ReactNode = null;\n    if (popoverTarget) {\n      editPopover = (\n        <StyledPopover\n          ref={popoverRef}\n          target={popoverTarget.button}\n          placement='auto'\n          role='dialog'\n        >\n          <Flex container={{ direction: 'column', gap: 2, pad: 2 }}>\n            <Text variant='h3'>{t('edit_stakeholder')}</Text>\n            <StyledEditFormWrap aria-busy={form.loading ? 'true' : 'false'}>\n              <Progress placement='local' visible={form.loading} message={progressMsgRef.current} />\n              {(!form.loading || progressMsgRef.current === t('submitting')) && (\n                <StakeholderForm\n                  roles={form.roles}\n                  currentRole={form.currentRole}\n                  renderer={form.renderer}\n                  rendererProps={form.rendererProps}\n                  setSelectedRoleNameRef={setSelectedRoleNameRef}\n                />\n              )}\n            </StyledEditFormWrap>\n            {formActions && <Flex container={{ justify: 'between' }}>{formActions}</Flex>}\n          </Flex>\n        </StyledPopover>\n      );\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        closePopover();\n      }\n    };\n\n    useEffect(() => {\n      if (!popoverTarget) return;\n      document.addEventListener('keydown', onKeydown);\n      return () => {\n        document.removeEventListener('keydown', onKeydown);\n      };\n    }, [popoverTarget]);\n\n    useAfterInitialEffect(() => {\n      if (!popoverTarget) form.onAfterClose?.();\n    }, [popoverTarget]);\n\n    return (\n      <>\n        <StyledStakeholders\n          {...restProps}\n          ref={ref}\n          icon='person'\n          name={t('view_stakeholders')}\n          loading={loading}\n          count={count}\n          error={error}\n          items={useMemo(\n            () => mergeItemActions(itemsProp.slice(0, 3)),\n            [mergeItemActions, itemsProp]\n          )}\n          actions={\n            onAddNew\n              ? [\n                  {\n                    text: t('add_stakeholders'),\n                    id: 'add_new',\n                    icon: 'plus',\n                    onClick() {\n                      setMode('add');\n                      onAddNew?.();\n                    }\n                  }\n                ]\n              : undefined\n          }\n          onViewAll={\n            onViewAll && count && count > 3\n              ? () => {\n                  setMode('viewAll');\n                  onViewAll?.();\n                }\n              : undefined\n          }\n        />\n        {popoverTarget && createPortal(editPopover, popoverTarget.portal)}\n      </>\n    );\n  }\n);\n\nexport default Stakeholders;\n"],"names":["StyledSelectInput","theme","base","components","input","height","spacing","S","StyledComboBox","defaultProps","StyledMultiSelectInput","MultiSelectInput","forwardRef","props","ref","selected","value","onRemove","onChange","onKeyDown","actions","readOnly","disabled","status","placeholder","autoFocus","restProps","inputRef","listRef","useRef","selector","cycle","dir","onInputKeyDown","useCallback","e","lastIndex","length","key","id","end","as","forwardedAs","container","alignItems","item","grow","wrap","onBlur","current","querySelectorAll","forEach","el","tabIndex","map","element","idx","toString","focus","preventDefault","text","size","undefined","autoComplete","StyledFieldGroupLegend","open","animation","speed","timing","ease","StyledFieldGroup","fontSize","fontScale","fontSizes","h3","h4","h5","h6","FieldGroupLegend","children","justify","items","FieldGroup","name","collapsible","defaultCollapsed","useState","setOpen","t","type","variant","onClick","cur","direction","gap","collapsed","Component","d","viewBox","focusable","NextKey","PrevKey","setTabIndexes","Array","from","slice","HTMLElement","checked","listener","includes","filter","rootNode","getRootNode","Document","ShadowRoot","newFocusIdx","focusIdx","indexOf","activeElement","lastIdx","useEffect","addEventListener","removeEventListener","StyledToolbar","palette","StyledViewAll","loading","searchInputProps","Flex","SearchInput","onSearchChange","Actions","iconOnly","Progress","placement","SummaryList","EmptyState","sameWidth","Object","freeze","enabled","phase","fn","state","styles","popper","width","rects","reference","requires","StyledSingleSelectInput","StyledVisualContainer","formControl","visual","mode","isMobile","navigator","userAgent","uid","useUID","required","label","labelHidden","info","onFocus","onDropdownButtonClickProp","onDropdownButtonClick","menu","useI18n","menuRef","menuComponentId","useElement","setContainerEl","containerRef","useConsolidatedRef","useFocusWithin","focused","setTimeout","scrollIntoView","behavior","block","stopPropagation","dropdownButton","useMemo","Button","icon","onMouseDown","Icon","onInputClick","inputActions","Comp","role","spellCheck","VisuallyHiddenText","Popover","show","target","modifiers","options","fallbackPlacements","strategy","Menu","focusControlEl","onItemClick","itemId","clickedItem","primary","onNew","arrowNavigationUnsupported","FormField","roles","currentRole","Renderer","renderer","rendererProps","setSelectedRoleNameRef","contentRef","find","selectedRoleName","setSelectedRoleName","control","inline","RadioButton","Input","description","StyledStakeholders","StyledEditFormWrap","StyledPopover","itemsProp","count","onAddNew","form","onViewAll","viewAll","error","createModal","useContext","create","modalMethods","setMode","editing","setEditing","popoverRef","progressMsgRef","selectedRoleNameRef","popoverTarget","setPopoverTarget","itemElsRef","itemEls","viewAllItemEls","mergeItemActions","i","onEdit","rest","itemActions","elArray","portal","button","querySelector","closePopover","formContent","StakeholderForm","formActions","closeForm","dismiss","onDismiss","onSubmit","modalContent","ViewAll","onSearch","modalProps","progress","message","onRequestDismiss","update","Modal","heading","onAfterClose","useOuterEvent","editPopover","pad","Text","visible","onKeydown","document","useAfterInitialEffect","createPortal"],"sourceRoot":""}