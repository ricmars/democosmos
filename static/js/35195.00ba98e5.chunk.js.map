{"version":3,"file":"static/js/35195.00ba98e5.chunk.js","mappings":"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","sources":["../node_modules/@pega/cosmos-react-core/src/hooks/useAutoResize.ts","../node_modules/@pega/cosmos-react-core/src/components/TextArea/TextArea.styles.ts","../node_modules/@pega/cosmos-react-core/src/components/TextArea/TextArea.test-ids.ts","../node_modules/@pega/cosmos-react-core/src/components/TextArea/TextArea.tsx","fields/TextArea.tsx"],"sourcesContent":["import { useRef, useState, MutableRefObject } from 'react';\n\nimport { debounce } from '../utils';\n\n/**\n * @example const [ref, resizeFunction] = useAutoResize();\n * maxHeight should be provided in pixels without units\n * minHeight should be provided in pixels without units\n * @returns * ref:: A reference for the element that the resize functionality should be applied to. [React RefObject](https://reactjs.org/docs/refs-and-the-dom.html)\n *          * resizeFunction:: The function to call to automatically resize the element.\n * element refers to auto resizable element\n */\nconst useAutoResize = <T extends HTMLElement = HTMLElement>(\n  maxHeight?: number,\n  minHeightProp?: number\n): [MutableRefObject<T | null>, () => void] => {\n  const element = useRef<T | null>(null);\n  const [minHeight, setMinHeight] = useState(minHeightProp || 0);\n\n  const autoResize = () => {\n    let scrollHeightElement: HTMLElement = element.current as HTMLElement;\n    let iframe: HTMLIFrameElement | undefined;\n    if (element.current && element.current instanceof HTMLIFrameElement) {\n      iframe = element.current;\n      scrollHeightElement =\n        element.current.contentDocument?.querySelector('body') ?? element.current;\n    }\n    if (element.current) {\n      let newMinHeight = minHeight;\n      if (!minHeight) {\n        newMinHeight =\n          scrollHeightElement.scrollHeight +\n          (scrollHeightElement.offsetHeight - scrollHeightElement.clientHeight);\n        setMinHeight(newMinHeight);\n      }\n      // Reset the heights to the base height so there is an overflow / or none to calculate the new height\n      scrollHeightElement.style.height = `${newMinHeight}px`;\n\n      if (maxHeight) {\n        scrollHeightElement.style.overflowY =\n          scrollHeightElement.scrollHeight > maxHeight ? 'auto' : 'hidden';\n        const height = `${Math.min(\n          scrollHeightElement.scrollHeight +\n            (scrollHeightElement.offsetHeight - scrollHeightElement.clientHeight),\n          maxHeight\n        )}px`;\n        scrollHeightElement.style.height = height;\n        if (iframe) iframe.style.height = height;\n      } else {\n        scrollHeightElement.style.overflowY = 'hidden';\n        const height =\n          scrollHeightElement.scrollHeight +\n          (scrollHeightElement.offsetHeight - scrollHeightElement.clientHeight);\n        scrollHeightElement.style.height = `${height}px`;\n        if (iframe) iframe.style.height = `${height}px`;\n      }\n    }\n  };\n\n  const debouncedAutoResize = debounce(autoResize, 100);\n\n  return [element, debouncedAutoResize];\n};\n\nexport default useAutoResize;\n","import styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\n\nconst StyledTextArea = styled.textarea<{ resizable: boolean }>(({ resizable }) => {\n  return css`\n    width: 100%;\n    min-height: ${props => props.theme.components['text-area']['min-height']};\n    padding: ${props => props.theme.components['text-area'].padding};\n    -webkit-appearance: none;\n    ${!resizable &&\n    css`\n      resize: none;\n    `}\n  `;\n});\n\nStyledTextArea.defaultProps = defaultThemeProp;\n\nexport default StyledTextArea;\n","import { createTestIds } from '../../utils';\nimport { elements } from '../FormField/FormField.test-ids';\n\nexport const getTextAreaTestIds = createTestIds('text-area', ['control', ...elements] as const);\n","import {\n  FC,\n  Ref,\n  forwardRef,\n  PropsWithoutRef,\n  ChangeEvent,\n  useCallback,\n  useState,\n  ChangeEventHandler,\n  useEffect\n} from 'react';\n\nimport { BaseProps, ForwardProps, NoChildrenProp, TestIdProp } from '../../types';\nimport FormField from '../FormField';\nimport { FormControlProps, StyledFormControl } from '../FormControl';\nimport { hasProp, withTestIds } from '../../utils';\nimport { useAutoResize, useConsolidatedRef, useI18n, useTestIds, useUID } from '../../hooks';\nimport Text from '../Text';\n\nimport StyledTextArea from './TextArea.styles';\nimport { getTextAreaTestIds } from './TextArea.test-ids';\n\nexport interface TextAreaProps extends FormControlProps, BaseProps, NoChildrenProp, TestIdProp {\n  /** Minimum length of characters that can be input. */\n  minLength?: number;\n  /** Maximum length of characters that can be input. */\n  maxLength?: number;\n  /**\n   * Allows the user to resize the Text Area.\n   * @default false\n   */\n  resizable?: boolean;\n  /**\n   * Enables the Text Area to resize itself automatically.\n   * @default true\n   */\n  autoResize?: boolean;\n  /**\n   * Display a live character count in relation to the maxLength.\n   * @default false\n   */\n  displayCharCount?: boolean;\n  /**\n   * Allow or disallow a value beyond the maxLength.\n   * @default true\n   */\n  hardStop?: boolean;\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>;\n}\n\nconst TextArea: FC<TextAreaProps & ForwardProps> = forwardRef(function TextArea(\n  props: PropsWithoutRef<TextAreaProps>,\n  ref: Ref<HTMLTextAreaElement>\n) {\n  const uid = useUID();\n  const {\n    testId,\n    additionalInfo,\n    id = uid,\n    value,\n    defaultValue,\n    required = false,\n    disabled = false,\n    readOnly = false,\n    label,\n    labelHidden,\n    info,\n    status,\n    resizable = false,\n    autoResize = true,\n    maxLength,\n    displayCharCount = false,\n    hardStop = true,\n    onChange: onChangeProp,\n    onResolveSuggestion,\n    ...restProps\n  } = props;\n  const t = useI18n();\n\n  const testIds = useTestIds(testId, getTextAreaTestIds);\n\n  const [textAreaRef, resizeTextArea] = useAutoResize<HTMLTextAreaElement>();\n  const consolidatedRef = useConsolidatedRef(textAreaRef, ref);\n  const [charCount, setCharCount] = useState(0);\n\n  const controlProp: {\n    value?: string;\n    defaultValue?: string;\n  } = {};\n\n  useEffect(() => {\n    if ('value' in props) {\n      setCharCount(props.value ? props.value.length : 0);\n    } else if ('defaultValue' in props) {\n      setCharCount(props.defaultValue ? props.defaultValue.length : 0);\n    }\n  }, [props]);\n\n  // Conditionally render component as controlled/uncontrolled\n  if (hasProp(props, 'value')) {\n    controlProp.value = value ?? '';\n  } else if (hasProp(props, 'defaultValue')) {\n    controlProp.defaultValue = defaultValue ?? '';\n  }\n\n  const onChange = useCallback(\n    (e: ChangeEvent<HTMLTextAreaElement>) => {\n      if (!hardStop || maxLength === undefined || e.target.value.length <= maxLength) {\n        onChangeProp?.(e);\n        setCharCount(e.target.value.length);\n        resizeTextArea();\n      }\n    },\n    [onChangeProp, resizeTextArea, hardStop, maxLength]\n  );\n\n  const Comp = (\n    <StyledFormControl\n      {...{\n        'data-testid': testIds.control,\n        ref: autoResize ? consolidatedRef : ref,\n        id,\n        required,\n        disabled,\n        status,\n        readOnly,\n        resizable,\n        maxLength: hardStop ? maxLength : undefined,\n        hasSuggestion: status === 'pending' && !!onResolveSuggestion,\n        ...controlProp,\n        ...restProps,\n        onChange,\n        as: StyledTextArea\n      }}\n    />\n  );\n\n  return label || displayCharCount ? (\n    <FormField\n      {...{\n        testId: testIds,\n        additionalInfo,\n        label,\n        labelHidden,\n        id,\n        readOnly,\n        info,\n        status,\n        charLimitDisplay:\n          displayCharCount && typeof maxLength === 'number' ? (\n            <Text\n              readOnly={readOnly}\n              variant='secondary'\n              aria-live={maxLength >= 0 && maxLength - charCount <= 20 ? 'polite' : 'off'}\n            >\n              {maxLength >= 0 ? t('x_of_y', [charCount || '0', maxLength]) : charCount}\n            </Text>\n          ) : undefined,\n        required,\n        disabled,\n        onResolveSuggestion\n      }}\n    >\n      {Comp}\n    </FormField>\n  ) : (\n    Comp\n  );\n});\n\nexport default withTestIds(TextArea, getTextAreaTestIds);\n","import { ChangeEvent, useState } from 'react';\nimport { TextArea as TextAreaCosmos } from '@pega/cosmos-react-core';\n\nexport default function InputField(props: any) {\n  const { field } = props;\n  const [inputValue, setInputValue] = useState(field.displayvalue);\n  return (\n    <TextAreaCosmos\n      type='text'\n      label={field.displaylabel}\n      value={inputValue}\n      onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {\n        setInputValue(e.target.value);\n      }}\n    />\n  );\n}\n"],"names":["maxHeight","minHeightProp","element","useRef","_useState","useState","_useState2","_slicedToArray","minHeight","setMinHeight","debouncedAutoResize","debounce","iframe","_element$current$cont","_element$current$cont2","scrollHeightElement","current","HTMLIFrameElement","contentDocument","querySelector","newMinHeight","scrollHeight","offsetHeight","clientHeight","style","height","concat","overflowY","Math","min","StyledTextArea","styled","textarea","_ref","resizable","css","_templateObject","_taggedTemplateLiteral","props","theme","components","padding","_templateObject2","defaultProps","defaultThemeProp","getTextAreaTestIds","createTestIds","_toConsumableArray","elements","TextArea","forwardRef","ref","uid","useUID","testId","additionalInfo","_props$id","id","value","defaultValue","_props$required","required","_props$disabled","disabled","_props$readOnly","readOnly","label","labelHidden","info","status","_props$resizable","_props$autoResize","autoResize","maxLength","_props$displayCharCou","displayCharCount","_props$hardStop","hardStop","onChangeProp","onChange","onResolveSuggestion","restProps","_objectWithoutProperties","_excluded","t","useI18n","testIds","useTestIds","_useAutoResize","useAutoResize","_useAutoResize2","textAreaRef","resizeTextArea","consolidatedRef","useConsolidatedRef","charCount","setCharCount","controlProp","useEffect","length","hasProp","useCallback","e","undefined","target","Comp","_jsx","StyledFormControl","_objectSpread","control","hasSuggestion","as","FormField","charLimitDisplay","Text","variant","children","withTestIds","InputField","field","displayvalue","inputValue","setInputValue","TextAreaCosmos","type","displaylabel"],"sourceRoot":""}