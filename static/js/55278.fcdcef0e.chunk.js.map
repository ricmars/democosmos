{"version":3,"file":"static/js/55278.fcdcef0e.chunk.js","mappings":"wTAQe,SAASA,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAChBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAExBI,EACJC,OACAC,OAAOC,YAAYC,aAAaC,SAASC,mBAAmBC,eAAeC,UAAUC,QACrF,aACA,IAEEC,EAAkB,GACjBT,OAAeC,OAAOS,KAAKX,GAAMQ,YACpCE,EAAYT,OAAeC,OAAOS,KAAKX,GAAMQ,WA8D/C,OACEI,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,WAAW,cACXC,MAAOL,EAASM,OAChBC,MAhDKP,EACJQ,QAAO,SAACC,EAAMC,GACb,OAAQtB,GAAasB,EAAI,CAC3B,IACCC,KAAI,SAACF,EAAMC,GACV,IAAME,EAAOH,EAAKI,eAAeC,MAAM,KACjCC,EAAOH,EAAKA,EAAKN,OAAS,GAC1BU,EAAOC,UAAU,SAADC,OAAUN,EAAKA,EAAKN,OAAS,GAAE,KAAAY,OAAIN,EAAKA,EAAKN,OAAS,KAC5E,MAAO,CACLa,KAAMV,EAAKW,YACXC,MACEnB,EAAAA,EAAAA,KAACoB,EAAAA,GAAQ,CACPf,MAAO,EACLgB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,QAAQ,YAAWC,SAAA,CAAC,UAChB,KACRxB,EAAAA,EAAAA,KAACyB,EAAAA,GAAI,CACHC,KAAMZ,EACNa,QAAS,SAACC,IAhCP,SAACd,EAAcc,GAClChD,EAAQkC,EAAM,CACZe,MAAO,CACLC,MAAQzC,OAAeyC,MACvBxC,OAASD,OAAeC,OACxByC,OAAS1C,OAAe0C,UAG5BH,EAAEI,iBACFJ,EAAEK,iBACJ,CAuBoBC,CAAapB,EAAMc,EACrB,EAAEJ,SAEDX,QAGLsB,EAAAA,EAAAA,GAAU5B,EAAK6B,qBACff,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,QAAQ,YAAWC,SAAA,CAAC,WAASjB,EAAK8B,sBAI9CC,SACEtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CACLhB,QAAQ,UACRI,QAAS,WAET,EAAEH,SACH,OAIHgB,QAAS,KAEb,IAQAC,cACEzC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACLC,KAAK,IACL1B,MAAM2B,EAAAA,EAAAA,MACNC,UAAUC,EAAAA,EAAAA,IAAW,iBAAiBC,EAAAA,EAAAA,SAG1CC,kBAAkBhD,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,IAC7BC,eAAgB,WACd/D,GAAa,SAAAgE,GAAG,OAAKA,CAAG,GAC1B,GAGN,C","sources":["components/Worklist.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Tasks } from '@pega/cosmos-react-work';\nimport { Button, Avatar, EmptyState, Text, MetaList, Link } from '@pega/cosmos-react-core';\nimport { getOperatorName, getOperatorUrl } from '../utils/env';\nimport { getDataUrl } from '../services';\nimport { genStatus } from '../utils/status';\n\nexport default function Worklist() {\n  const history = useNavigate();\n  const [isLimited, setIsLimited] = useState(true);\n\n  const page = (\n    window as any\n  ).portal.uiResources.context_data.pyPortal.summary_of_lists__.D_pyMyWorkList.pxResults.replace(\n    '.pxResults',\n    ''\n  );\n  let tasklist: any[] = [];\n  if ((window as any).portal.data[page].pxResults) {\n    tasklist = (window as any).portal.data[page].pxResults;\n  }\n\n  const openCaseType = (path: string, e: React.FormEvent<HTMLFormElement>) => {\n    history(path, {\n      state: {\n        token: (window as any).token,\n        portal: (window as any).portal,\n        config: (window as any).config\n      }\n    });\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const openAssignment = () => {};\n\n  const renderTasklist = () => {\n    return tasklist\n      .filter((item, i) => {\n        return !isLimited || i < 3;\n      })\n      .map((item, i) => {\n        const keys = item.pxRefObjectKey.split(' ');\n        const pyID = keys[keys.length - 1];\n        const path = encodeURI(`/case/${keys[keys.length - 2]} ${keys[keys.length - 1]}`);\n        return {\n          name: item.pxTaskLabel,\n          meta: (\n            <MetaList\n              items={[\n                <Text variant='secondary'>\n                  Task in{' '}\n                  <Link\n                    href={path}\n                    onClick={(e: React.FormEvent<HTMLFormElement>) => {\n                      openCaseType(path, e);\n                    }}\n                  >\n                    {pyID}\n                  </Link>\n                </Text>,\n                genStatus(item.pyAssignmentStatus),\n                <Text variant='secondary'>Urgency {item.pxUrgencyAssign}</Text>\n              ]}\n            />\n          ),\n          actions: (\n            <Button\n              variant='primary'\n              onClick={() => {\n                openAssignment();\n              }}\n            >\n              Go\n            </Button>\n          ),\n          content: null\n        };\n      });\n  };\n\n  return (\n    <Tasks\n      headerText='My Worklist'\n      count={tasklist.length}\n      items={renderTasklist()}\n      headerVisual={\n        <Avatar\n          size='l'\n          name={getOperatorName()}\n          imageSrc={getDataUrl('operatorimage', getOperatorUrl())}\n        />\n      }\n      emptyPlaceholder={<EmptyState />}\n      onExpandToggle={() => {\n        setIsLimited(cur => !cur);\n      }}\n    />\n  );\n}\n"],"names":["Worklist","history","useNavigate","_useState","useState","_useState2","_slicedToArray","isLimited","setIsLimited","page","window","portal","uiResources","context_data","pyPortal","summary_of_lists__","D_pyMyWorkList","pxResults","replace","tasklist","data","_jsx","Tasks","headerText","count","length","items","filter","item","i","map","keys","pxRefObjectKey","split","pyID","path","encodeURI","concat","name","pxTaskLabel","meta","MetaList","_jsxs","Text","variant","children","Link","href","onClick","e","state","token","config","preventDefault","stopPropagation","openCaseType","genStatus","pyAssignmentStatus","pxUrgencyAssign","actions","Button","content","headerVisual","Avatar","size","getOperatorName","imageSrc","getDataUrl","getOperatorUrl","emptyPlaceholder","EmptyState","onExpandToggle","cur"],"sourceRoot":""}