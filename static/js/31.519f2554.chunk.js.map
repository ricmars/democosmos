{"version":3,"sources":["pages/Search.tsx"],"names":["singleselect","getFilterType","list","type","map","item","id","label","genStatus","checked","name","initialFilters","items","selectType","Search","defaultSearchValue","window","searchString","useState","searchres","setSearchRes","setSearchString","filterList","portal","listofcases","data","pyPortal","pyCaseTypesAvailableToCreate","unshift","pyClassName","pyLabel","getAllFilters","filters","setFilters","limit","setLimit","useEffect","searchTerm","replace","typeOfWork","updatedOn","caseTypeList","statusFilters","forEach","filter","val","push","sendData","encodeURIComponent","then","response","reduce","curVal","entry","metaItems","status","pzWorkStatus","toUpperCase","length","e","indexOf","value","Date","pxCreateDateTime","variant","format","pxCreateOpName","pyID","title","link","href","pzCategory","meta","description","pyDescription","renderSearchItem","catch","error","console","log","results","slice","searchInputProps","onSearchSubmit","searchInputAriaLabel","count","onFilterChange","changeEvent","curr","newFilter","newItem","onClearAllFilters","onClearFilter","filterName","onShowMore","undefined"],"mappings":"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","file":"static/js/31.519f2554.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Text, DateTimeDisplay } from '@pega/cosmos-react-core';\nimport { SearchResults } from '@pega/cosmos-react-work';\nimport { sendData } from '../services';\nimport { genStatus } from '../utils/status';\n\ntype SelectFilterProps = any;\n\nconst STATUS_TYPES = ['blocked', 'pending', 'new', 'open', 'resolved'];\nconst WORK_TYPES = ['All unresolved work', 'Work last entered by me', 'Work last updated by me'];\nconst LAST_UPDATED_TYPES = ['Last 90 days', 'Last 30 days', 'Last 7 days', 'Yesterday', 'Today'];\nconst singleselect = 'single-select';\n\nconst getFilterType = (list: any[], type?: string) => {\n  return list.map(item => {\n    return {\n      id: item,\n      label: type === 'status' ? genStatus(item) : item,\n      checked: false,\n      name: item\n    };\n  });\n};\nconst initialFilters = [\n  {\n    type: 'select',\n    id: 'status',\n    name: 'Status',\n    items: getFilterType(STATUS_TYPES, 'status')\n  },\n  {\n    type: 'select',\n    selectType: singleselect,\n    id: 'type-of-work',\n    name: 'Type of work',\n    items: getFilterType(WORK_TYPES)\n  },\n  {\n    type: 'select',\n    selectType: singleselect,\n    id: 'last-updated',\n    name: 'Last updated',\n    items: getFilterType(LAST_UPDATED_TYPES)\n  }\n];\n\nconst getAllFilters = () => {\n  const filterList = [...initialFilters];\n  if ((window as any).portal) {\n    const listofcases = (window as any).portal.data.pyPortal.pyCaseTypesAvailableToCreate;\n    filterList.unshift({\n      type: 'select',\n      id: 'case-type',\n      name: 'Case type',\n      items: listofcases.map((item: any) => {\n        return {\n          id: item.pyClassName,\n          label: item.pyLabel,\n          checked: false,\n          name: item.pyLabel\n        };\n      })\n    });\n  }\n  return filterList;\n};\nconst renderSearchItem = (entry: any, statusFilters: any[]) => {\n  const metaItems = [];\n  const status = entry.pzWorkStatus ? entry.pzWorkStatus.toUpperCase() : '';\n  if (\n    statusFilters.length > 0 &&\n    statusFilters.filter(e => status.indexOf(e.toUpperCase()) === 0).length === 0\n  ) {\n    return null;\n  }\n  if (status !== '') {\n    metaItems.push(genStatus(status));\n  }\n  metaItems.push(\n    <Text>\n      Updated on{' '}\n      <DateTimeDisplay value={new Date(entry.pxCreateDateTime)} variant='date' format='short' />\n    </Text>\n  );\n  metaItems.push(<Text>Created by {entry.pxCreateOpName}</Text>);\n  return {\n    id: entry.pyID,\n    title: entry.pyLabel,\n    link: {\n      href: `/case/${entry.pzCategory}/${entry.pyID}`\n    },\n    meta: metaItems,\n    description: entry.pyDescription\n  };\n};\n// ---------------------------------------------------------------------------------------------------------------------\n// Search Page\n// ---------------------------------------------------------------------------------------------------------------------\nconst Search = () => {\n  let defaultSearchValue = '';\n  let searchResult: any = [];\n\n  if ((window as any).searchString) {\n    defaultSearchValue = (window as any).searchString;\n  }\n  const [searchres, setSearchRes] = useState(searchResult);\n  const [searchString, setSearchString] = useState(defaultSearchValue);\n  const [filters, setFilters] = useState<SelectFilterProps | undefined>(getAllFilters());\n  const [limit, setLimit] = useState(30);\n\n  const handleShowMore = () => {\n    if (limit < searchres.length) setLimit(curr => curr + 30);\n  };\n\n  const handleFilterChange = (changeEvent: any) => {\n    setFilters((curr: any) => {\n      return curr.map((filter: any) => {\n        const newFilter = { ...filter };\n        if (\n          newFilter.name === changeEvent.name &&\n          changeEvent.type === 'select' &&\n          newFilter.type === 'select'\n        ) {\n          newFilter.items = newFilter.items.map((item: any) => {\n            const newItem = { ...item };\n            if (item.id === changeEvent.value.id) newItem.checked = changeEvent.value.checked;\n            else if (newFilter.selectType === singleselect) newItem.checked = false;\n            return newItem;\n          });\n        }\n        return newFilter;\n      });\n    });\n  };\n\n  const clearAllFilters = () => {\n    setFilters((curr: any) => {\n      return curr.map((filter: any) => {\n        if (filter.type === 'select') {\n          filter.items = filter.items.map((item: any) => {\n            item.checked = false;\n            return item;\n          });\n        }\n        return filter;\n      });\n    });\n  };\n\n  const handleClearFilter = (filterName: string) => {\n    setFilters((curr: any) => {\n      return curr.map((filter: any) => {\n        if (filter.name === filterName && filter.type === 'select') {\n          filter.items = filter.items.map((item: any) => {\n            item.checked = false;\n            return item;\n          });\n        }\n        return filter;\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (!searchString || searchString === '') return;\n    const searchTerm = searchString.replace(/['\"]+/g, '');\n    (window as any).searchString = searchTerm;\n    const numResults = '500';\n    let typeOfWork = 'All work';\n    let updatedOn = 'Anytime';\n    const caseTypeList = [];\n    let statusFilters: any[] = [];\n    filters.forEach((filter: any) => {\n      filter.items.forEach((val: any) => {\n        if (val.checked) {\n          switch (filter.id) {\n            case 'status':\n              statusFilters.push(val.id);\n              break;\n            case 'type-of-work':\n              typeOfWork = val.id;\n              break;\n            case 'last-updated':\n              updatedOn = val.id;\n              break;\n            case 'case-type':\n              caseTypeList.push(val.id);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n    });\n    sendData(\n      'dataviews',\n      'D_pySearch',\n      `{\"dataViewParameters\":[{\"SearchString\":\"${encodeURIComponent(\n        searchTerm\n      )}\"},{\"TypeOfWork\":\"${typeOfWork}\"},{\"UpdatedOn\":\"${updatedOn}\"},{\"pyMaxResults\":\"${numResults}\"}]}`\n    )\n      .then(response => {\n        if (response.data !== null) {\n          setSearchRes(\n            response.data.reduce((curVal: any[], entry: any) => {\n              const val = renderSearchItem(entry, statusFilters);\n              if (val !== null) {\n                curVal.push(val);\n              }\n              return curVal;\n            }, [])\n          );\n        } else {\n          setSearchRes([]);\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        setSearchRes([]);\n      });\n  }, [searchString, filters]);\n\n  const updateSearchString = (value: string) => {\n    setSearchString(value);\n  };\n\n  return (\n    <SearchResults\n      results={limit < searchres.length ? searchres.slice(0, limit) : searchres}\n      searchInputProps={{\n        value: searchString,\n        onSearchSubmit: updateSearchString,\n        searchInputAriaLabel: 'Enter a search'\n      }}\n      count={searchres.length}\n      filters={filters}\n      onFilterChange={handleFilterChange}\n      onClearAllFilters={clearAllFilters}\n      onClearFilter={handleClearFilter}\n      onShowMore={limit < searchres.length ? handleShowMore : undefined}\n    />\n  );\n};\n\nexport default Search;\n"],"sourceRoot":""}