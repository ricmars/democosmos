{"version":3,"file":"static/js/41903.f15f8707.chunk.js","mappings":"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","sources":["components/Worklist.tsx","../node_modules/@pega/cosmos-react-core/src/components/Card/CardContent.tsx","../node_modules/@pega/cosmos-react-core/src/components/Card/CardFooter.tsx","../node_modules/@pega/cosmos-react-core/src/components/Card/CardHeader.tsx","../node_modules/@pega/cosmos-react-core/src/components/SummaryList/SummaryList.tsx","../node_modules/@pega/cosmos-react-work/src/components/Tasks/TaskList.tsx","../node_modules/@pega/cosmos-react-work/src/components/Tasks/Tasks.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Tasks } from '@pega/cosmos-react-work';\nimport { Button, Avatar, EmptyState, Text, MetaList, Link } from '@pega/cosmos-react-core';\nimport { getOperatorName, getOperatorUrl, getCaseTypeName } from '../utils/env';\nimport { getDataUrl } from '../services';\nimport { genStatus } from '../utils/status';\n\nexport default function Worklist() {\n  const history = useNavigate();\n  const [isLimited, setIsLimited] = useState(true);\n\n  const page = (\n    window as any\n  ).portal.uiResources.context_data.pyPortal.summary_of_lists__.D_pyMyWorkList.pxResults.replace(\n    '.pxResults',\n    ''\n  );\n  let tasklist: any[] = [];\n  if ((window as any).portal.data[page].pxResults) {\n    tasklist = (window as any).portal.data[page].pxResults;\n  }\n\n  const openCaseType = (path: string, e: React.FormEvent<HTMLFormElement>) => {\n    history(path, {\n      state: {\n        token: (window as any).token,\n        portal: (window as any).portal,\n        config: (window as any).config\n      }\n    });\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const openAssignment = () => {};\n\n  const renderTasklist = () => {\n    return tasklist\n      .filter((item, i) => {\n        return !isLimited || i < 3;\n      })\n      .map((item, i) => {\n        const pyID = item.pxRefObjectKey.split(' ')[1];\n        const path = `/case/${getCaseTypeName(item.pxRefObjectClass)}/${pyID}`;\n        return {\n          name: item.pxTaskLabel,\n          meta: (\n            <MetaList\n              items={[\n                <Text variant='secondary'>\n                  Task in{' '}\n                  <Link\n                    href={path}\n                    onClick={(e: React.FormEvent<HTMLFormElement>) => {\n                      openCaseType(path, e);\n                    }}\n                  >\n                    {item.pyLabel} {pyID}\n                  </Link>\n                </Text>,\n                genStatus(item.pyAssignmentStatus),\n                <Text variant='secondary'>Urgency {item.pxUrgencyAssign}</Text>\n              ]}\n            />\n          ),\n          actions: (\n            <Button\n              variant='primary'\n              onClick={() => {\n                openAssignment();\n              }}\n            >\n              Go\n            </Button>\n          ),\n          content: null\n        };\n      });\n  };\n\n  return (\n    <Tasks\n      headerText='My Worklist'\n      count={tasklist.length}\n      items={renderTasklist()}\n      headerVisual={\n        <Avatar\n          size='l'\n          name={getOperatorName()}\n          imageSrc={getDataUrl('operatorimage', getOperatorUrl())}\n        />\n      }\n      emptyPlaceholder={<EmptyState />}\n      onExpandToggle={() => {\n        setIsLimited(cur => !cur);\n      }}\n    />\n  );\n}\n","import { FunctionComponent, PropsWithChildren, ReactNode } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport { BaseProps, ForwardProps } from '../../types';\nimport Flex, { FlexProps } from '../Flex';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\nimport { StyledCardFooter } from './CardFooter';\n\nexport interface CardContentProps extends BaseProps {\n  /** The content of the Card. */\n  children: ReactNode;\n  container?: Exclude<FlexProps['container'], boolean>;\n}\n\nexport const StyledCardContent = styled.div(({ theme }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      position: relative;\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      & + &,\n      & + ${StyledCardFooter} {\n        padding-block-start: 0;\n      }\n    }\n  `;\n});\n\nStyledCardContent.defaultProps = defaultThemeProp;\n\nconst CardContent: FunctionComponent<CardContentProps & ForwardProps> = ({\n  children,\n  container,\n  ...restProps\n}: PropsWithChildren<CardContentProps & ForwardProps>) => {\n  return (\n    <Flex {...restProps} container={{ direction: 'column', ...container }} as={StyledCardContent}>\n      {children}\n    </Flex>\n  );\n};\n\nexport default CardContent;\n","import { FunctionComponent, PropsWithChildren } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport Flex, { FlexContainerProps } from '../Flex';\nimport { BaseProps, ForwardProps } from '../../types';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\n\nexport interface CardFooterProps extends BaseProps {\n  /** [justify-content](https://css-tricks.com/almanac/properties/j/justify-content/) */\n  justify?: FlexContainerProps['justify'];\n}\n\nexport const StyledCardFooter = styled.footer(({ theme }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n    }\n  `;\n});\n\nStyledCardFooter.defaultProps = defaultThemeProp;\n\nconst CardFooter: FunctionComponent<CardFooterProps & ForwardProps> = (\n  props: PropsWithChildren<CardFooterProps>\n) => {\n  const { children, justify, ...restProps } = props;\n\n  return (\n    <Flex\n      as={StyledCardFooter}\n      container={{\n        wrap: 'wrap',\n        alignItems: 'center',\n        justify\n      }}\n      {...restProps}\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport default CardFooter;\n","import { forwardRef, FunctionComponent, PropsWithChildren, ReactNode, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { BaseProps, ForwardProps } from '../../types';\nimport { StyledPopover } from '../Popover';\n\nimport { StyledCard } from './Card';\nimport { StyledCardContent } from './CardContent';\n\nexport interface CardHeaderProps extends BaseProps {\n  /** The Card header content. */\n  children: ReactNode;\n  /** Action Buttons that will render within the header. */\n  actions?: ReactNode;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLDivElement>;\n}\n\nexport const StyledCardHeader = styled.header<CardHeaderProps>(({ theme, onClick }) => {\n  return css`\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      + ${StyledCardContent} {\n        padding-block-start: 0;\n      }\n\n      &:hover {\n        ${onClick ? 'cursor: pointer;' : undefined}\n      }\n    }\n  `;\n});\n\nStyledCardHeader.defaultProps = defaultThemeProp;\n\nconst CardHeader: FunctionComponent<CardHeaderProps & ForwardProps> = forwardRef(\n  (\n    { children, actions, ...restProps }: PropsWithChildren<CardHeaderProps>,\n    ref: CardHeaderProps['ref']\n  ) => {\n    return (\n      <Flex\n        container={{ alignItems: 'center', justify: 'between' }}\n        as={StyledCardHeader}\n        {...restProps}\n        ref={ref}\n      >\n        {actions ? (\n          <>\n            <Flex container={{ alignItems: 'center' }} item={{ grow: 1 }}>\n              {children}\n            </Flex>\n            <div>{actions}</div>\n          </>\n        ) : (\n          children\n        )}\n      </Flex>\n    );\n  }\n);\n\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;\n","import { forwardRef, PropsWithoutRef, Ref, FC, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Actions from '../Actions';\nimport Flex from '../Flex';\nimport Text from '../Text';\nimport Count from '../Badges/Count';\nimport Icon from '../Icon';\nimport Card, { CardHeader, CardContent, CardFooter } from '../Card';\nimport EmptyState, { EmptyStateProps } from '../EmptyState';\nimport { ForwardProps, NoChildrenProp, OmitStrict, Action } from '../../types';\nimport { omitProps } from '../../styles';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport SummaryItem, { SummaryItemProps } from '../SummaryItem';\nimport Progress from '../Progress';\nimport Button from '../Button';\nimport ErrorState from '../ErrorState';\nimport type { ErrorStateProps } from '../ErrorState';\n\nexport interface SummaryListProps extends NoChildrenProp {\n  /** Name of the utility to be used as its heading along with associated actions and aria attributes. */\n  name?: string;\n  /** Identifier for the icon within Pega icons.  */\n  icon?: string;\n  /** Integer representing the total count of items for a list utility dataset. */\n  count?: number;\n  /** Top level actions for the utility. If more than one action is passed a consolidated ActionMenu will be generated. */\n  actions?: Action[];\n  /** If the utility is in a state of fetching data. */\n  loading?: boolean | string;\n  /** An array of SummaryListItem objects to render. Pass an appropriately limited length array with a desired sort order based on design system defaults or config. */\n  items: SummaryListItem[];\n  /** User click initiated callback for when to show view all modal. List lengths less than the count prop will display a \"View all\" button with this function is bound to. */\n  onViewAll?: (callback: Function) => void;\n  /** A simple message to display when there are no items. */\n  noItemsText?: EmptyStateProps['message'];\n  /**\n   * Indicate an error occurred while acquiring data for the list.\n   * The default error state may be overridden with custom props.\n   */\n  error?: boolean | ErrorStateProps;\n  /** Ref for the SummaryList's root element.  */\n  ref?: Ref<HTMLElement>;\n}\n\nexport interface SummaryListItem extends OmitStrict<SummaryItemProps, 'actions'>, ForwardProps {\n  /** A unique id to represent the item. */\n  id: string;\n  /** A set of Actions to render alongside the item. If more than one action is passed a consolidated ActionMenu will be generated. */\n  actions?: Action[];\n}\n\nexport const StyledSummaryListContent = styled(CardContent).withConfig<{ loading?: boolean }>(\n  omitProps('loading')\n)(\n  ({ theme, loading }) => css`\n    ${loading &&\n    css`\n      min-height: 4rem;\n    `}\n\n    &:not(:last-child) > ul > li:last-child {\n      border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n    }\n  `\n);\n\nStyledSummaryListContent.defaultProps = defaultThemeProp;\n\nexport const StyledSummaryListItem: typeof SummaryItem = styled(SummaryItem)(\n  ({ theme }) =>\n    css`\n      padding: ${theme.base.spacing} 0;\n\n      &:not(:last-child) {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n      }\n    `\n);\n\nStyledSummaryListItem.defaultProps = defaultThemeProp;\n\nexport const SummaryListItems = ({ items }: Pick<SummaryListProps, 'items'>) => {\n  return (\n    <ul>\n      {items.map(({ id, actions: itemActions, ...restItemProps }) => {\n        return (\n          <StyledSummaryListItem\n            key={id}\n            {...restItemProps}\n            forwardedAs='li'\n            actions={itemActions && <Actions items={itemActions} />}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nconst SummaryList: FC<SummaryListProps & ForwardProps> = forwardRef(\n  (\n    {\n      icon,\n      name,\n      count,\n      actions,\n      items,\n      onViewAll,\n      loading,\n      noItemsText,\n      error,\n      ...restProps\n    }: PropsWithoutRef<SummaryListProps>,\n    ref: SummaryListProps['ref']\n  ) => {\n    const t = useI18n();\n\n    const content = useMemo(() => {\n      if (loading) {\n        return (\n          <Progress placement='local' message={typeof loading === 'string' ? loading : undefined} />\n        );\n      }\n\n      if (error) {\n        return <ErrorState {...(error === true ? {} : error)} />;\n      }\n\n      return items.length > 0 ? (\n        <SummaryListItems items={items} />\n      ) : (\n        <EmptyState message={noItemsText} />\n      );\n    }, [loading, items, noItemsText, error]);\n\n    return (\n      <Card ref={ref} {...restProps}>\n        {(icon || name || typeof count === 'number' || actions) && (\n          <CardHeader>\n            <Flex container={{ alignItems: 'center', gap: 1 }}>\n              {icon && <Icon name={icon} />}\n              {name && <Text variant='h2'>{name}</Text>}\n              {typeof count === 'number' && <Count>{count}</Count>}\n            </Flex>\n            {actions && <Actions items={actions} />}\n          </CardHeader>\n        )}\n\n        <StyledSummaryListContent loading={loading}>{content}</StyledSummaryListContent>\n\n        {!error && typeof count === 'number' && count > items.length && onViewAll && (\n          <CardFooter justify='center'>\n            <Button\n              variant='link'\n              aria-label={name ? t('view_all_noun', [name.toLowerCase()]) : t('view_all')}\n              onClick={onViewAll}\n            >\n              {t('view_all')}\n            </Button>\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n);\n\nexport default SummaryList;\n","import { forwardRef, FunctionComponent, PropsWithoutRef, ReactNode, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport {\n  ForwardProps,\n  SummaryItem,\n  StyledSummaryListItem,\n  Flex,\n  defaultThemeProp\n} from '@pega/cosmos-react-core';\n\nexport interface TaskItemProps {\n  /** Name of the task displayed in the list. */\n  name: NonNullable<ReactNode>;\n  /** Avatar element to represent the task's assignee. */\n  avatar?: ReactNode;\n  /** MetaList element with info related to the task. */\n  meta?: ReactNode;\n  /** Region for task level actions such as opening or dismissing. */\n  actions?: ReactNode;\n  /** Content for the task when open. */\n  content?: ReactNode;\n  [key: string]: unknown;\n}\n\nexport interface TaskListProps {\n  items: TaskItemProps[];\n  hasFooter?: boolean;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLElement>;\n}\n\nconst StyledTaskList = styled.ul<{ hasFooter: boolean }>(({ theme, hasFooter }) => {\n  return css`\n    ${hasFooter &&\n    css`\n      > li:last-child {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n      }\n    `}\n  `;\n});\n\nStyledTaskList.defaultProps = defaultThemeProp;\n\nexport const TaskItem = ({ name, avatar, meta, actions, content, ...restProps }: TaskItemProps) => {\n  const summary = (\n    <SummaryItem\n      visual={avatar}\n      primary={name}\n      secondary={meta}\n      actions={content ? null : actions}\n    />\n  );\n  return (\n    <Flex\n      container={{ direction: 'column', gap: 2 }}\n      item={{ grow: 1 }}\n      as={StyledSummaryListItem}\n      forwardedAs='li'\n      {...restProps}\n    >\n      {content ? (\n        <>\n          {summary}\n          {content}\n        </>\n      ) : (\n        summary\n      )}\n    </Flex>\n  );\n};\n\nconst TaskList: FunctionComponent<TaskListProps & ForwardProps> = forwardRef(\n  ({ items, hasFooter = false }: PropsWithoutRef<TaskListProps>, ref) => {\n    return (\n      <Flex container={{ direction: 'column' }} as={StyledTaskList} hasFooter={hasFooter} ref={ref}>\n        {items.map((item, i) => (\n          <TaskItem {...item} key={`${i + 1}`} />\n        ))}\n      </Flex>\n    );\n  }\n);\n\nexport default TaskList;\n","import { ReactNode, FC, ReactElement, useMemo, MouseEvent } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardFooter,\n  Flex,\n  Text,\n  SummaryItem,\n  Count,\n  Button,\n  useI18n,\n  ForwardProps,\n  NoChildrenProp\n} from '@pega/cosmos-react-core';\n\nimport TaskList, { TaskItem, TaskItemProps } from './TaskList';\n\nexport interface TasksProps extends NoChildrenProp {\n  /** An array of TaskItemProps to generate the list.  */\n  items: TaskItemProps[];\n  /** Content to render when the list is empty. */\n  emptyPlaceholder: ReactNode;\n  /** Heading text to render at the top of the list. */\n  headerText: string;\n  /** A visual element i.e. (Avatar | Icon) to accompany the header text. */\n  headerVisual?: ReactElement;\n  /** A region for supplemental task list info or controls. */\n  headerSecondary?: ReactNode;\n  /** Integer representing the total count of tasks. */\n  count?: number | null;\n  /** Callback for when to show more/less button is clicked. Lists greater than 3 items will display the show toggle button in its footer. */\n  onExpandToggle?: () => void;\n}\n\nconst StyledTasks = styled(Card)<{ openItem?: boolean }>(({ theme, openItem }) => {\n  return openItem\n    ? css`\n        box-shadow: ${theme.base.shadow.low};\n      `\n    : null;\n});\n\nconst Tasks: FC<ForwardProps & TasksProps> = (props: TasksProps) => {\n  const {\n    items = [],\n    headerText,\n    headerVisual,\n    headerSecondary,\n    count,\n    onExpandToggle,\n    emptyPlaceholder,\n    ...restProps\n  } = props;\n  const openItem = items.find(item => item.content);\n  const t = useI18n();\n\n  const hasFooter = useMemo(() => {\n    return !openItem && typeof count === 'number' && count > 3;\n  }, [openItem, count]);\n\n  const TaskItems = useMemo(() => {\n    return openItem ? <TaskItem {...openItem} /> : <TaskList items={items} hasFooter={hasFooter} />;\n  }, [items, openItem]);\n\n  return (\n    <StyledTasks {...restProps} openItem={!!openItem}>\n      {!openItem && (\n        <CardHeader>\n          <SummaryItem\n            visual={headerVisual}\n            primary={\n              <Flex container={{ alignItems: 'center', gap: 1 }}>\n                <Text variant='h2'>{headerText}</Text>\n                <Count>{count ?? null}</Count>\n              </Flex>\n            }\n            secondary={headerSecondary}\n          />\n        </CardHeader>\n      )}\n      <CardContent>{items.length > 0 ? TaskItems : emptyPlaceholder}</CardContent>\n\n      {hasFooter && (\n        <CardFooter justify='center'>\n          <Button\n            variant='link'\n            aria-label={t(!!count && count > items.length ? 'show_more' : 'show_less', ['tasks'])}\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              onExpandToggle?.();\n              if (!!count && count <= items.length) {\n                const { currentTarget } = e;\n                requestAnimationFrame(() => {\n                  if (currentTarget.getBoundingClientRect().top < 0) currentTarget.scrollIntoView();\n                });\n              }\n            }}\n          >\n            {t(!!count && count > items.length ? 'show_more' : 'show_less')}\n          </Button>\n        </CardFooter>\n      )}\n    </StyledTasks>\n  );\n};\n\nexport default Tasks;\n"],"names":["Worklist","history","useNavigate","useState","isLimited","setIsLimited","page","window","portal","uiResources","context_data","pyPortal","summary_of_lists__","D_pyMyWorkList","pxResults","replace","tasklist","data","headerText","count","length","items","filter","item","i","map","pyID","pxRefObjectKey","split","path","getCaseTypeName","pxRefObjectClass","name","pxTaskLabel","meta","variant","href","onClick","e","state","token","config","preventDefault","stopPropagation","openCaseType","pyLabel","genStatus","pyAssignmentStatus","pxUrgencyAssign","actions","content","headerVisual","size","getOperatorName","imageSrc","getDataUrl","getOperatorUrl","emptyPlaceholder","onExpandToggle","cur","StyledCardContent","theme","base","spacing","components","card","padding","defaultProps","children","container","restProps","direction","as","StyledCardFooter","props","justify","wrap","alignItems","StyledCardHeader","undefined","CardHeader","forwardRef","ref","grow","displayName","StyledSummaryListContent","withConfig","loading","palette","StyledSummaryListItem","SummaryListItems","id","itemActions","restItemProps","forwardedAs","SummaryList","icon","onViewAll","noItemsText","error","t","useMemo","placement","message","gap","toLowerCase","StyledTaskList","hasFooter","TaskItem","avatar","summary","SummaryItem","visual","primary","secondary","Flex","key","StyledTasks","Card","openItem","shadow","low","headerSecondary","find","useI18n","TaskItems","Text","Count","CardContent","CardFooter","Button","currentTarget","requestAnimationFrame","getBoundingClientRect","top","scrollIntoView"],"sourceRoot":""}