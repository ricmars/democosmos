{"version":3,"sources":["components/Tags.tsx"],"names":["Tags","props","useState","tags","setTags","isLoaded","setIsLoaded","countEdit","setcountEdit","caseKey","getCaseTypeClass","casetypeid","toUpperCase","caseid","replace","useEffect","fetchData","then","response","caseTags","tagsList","utilityCtx","iconName","count","length","map","item","tagName","availableTags","loading","onEditTags","selectedTags","Promise","resolve","tagsMap","forEach","tagKey","newTags","updatedTags","tag","newTag","push","Name","text","numReq","Object","entries","value","sendData","prevCount","JSON","stringify","onSearch","query"],"mappings":"4MAKe,SAASA,EAAKC,GAC3B,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACIC,EAAO,UAAMC,YACfT,EAAMU,YACNC,cAFS,cAEUX,EAAMY,OAAOD,eAClCH,EAAUA,EAAQK,QAAR,WAAoBb,EAAMU,WAAWC,cAArC,OAAyD,OAEnEG,qBAAU,WACU,IAAdR,GAAoBF,GACtBW,YAAU,QAAD,UAAaP,EAAb,UAA6BQ,MAAK,SAAAC,GACzC,IAAMC,EAAWD,EAASE,SAC1BnB,EAAMoB,WAAW,OAAQ,CACvBC,SAAU,MACVC,MAAOJ,EAASK,SAElBpB,EAAQe,GACRb,GAAY,QAGf,CAACG,EAASF,EAAWF,EAAUJ,IA2ClC,OACE,cAAC,IAAD,CACEE,KACEA,EACIA,EAAKsB,KAAI,SAACC,GAAe,IAAD,EACtB,iBAAOA,EAAKC,eAAZ,QAAuBD,KAEzB,GAENE,cAAe,GACfC,SAAU1B,EACV2B,WApDmB,SAACC,GACtB,OAAO,IAAIC,SAAc,SAAAC,GACvB,IAAMC,EAAe,GACjB/B,GACFA,EAAKgC,SAAQ,SAACT,GACZQ,EAAQR,EAAKC,SAAWD,EAAKU,UAajC,IAVA,IAAMC,EAAe,GACfC,EAAcP,EAAaN,KAAI,SAAAc,GAMnC,OALIA,EAAIC,OACNH,EAAQI,KAAK,CAAEC,KAAMH,EAAII,cAElBT,EAAQK,EAAII,MAEdJ,EAAII,QAETC,EAAS,EACb,MAAwBC,OAAOC,QAAQZ,GAAvC,eAAiD,CAA5C,IAASa,EAAT,uBACHH,IACAI,YAAS,QAAD,UAAavC,EAAb,iBAA6BsC,GAAS,GAAI,UAAU9B,MAAK,WAC/DT,GAAa,SAAAyC,GAAS,OAAIA,EAAY,QAGtCZ,EAAQb,OAAS,IACnBoB,IACAI,YAAS,QAAD,UAAavC,EAAb,SAA6ByC,KAAKC,UAAU,CAAEhD,KAAMkC,KAAYpB,MAAK,WAC3ET,GAAa,SAAAyC,GAAS,OAAIA,EAAY,SAG1ChD,EAAMoB,WAAW,OAAQ,CACvBC,SAAU,MACVC,MAAOe,EAAYd,SAErBpB,EAAQkC,GACR9B,EAAaoC,GACbtC,GAAY,GACZ2B,QAgBAmB,SAAU,SAACC","file":"static/js/10.85d2a91c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Tags as CosmosTags, TagsProps } from '@pega/cosmos-react-work';\nimport { getCaseTypeClass } from '../utils/env';\nimport { fetchData, sendData } from '../services';\n\nexport default function Tags(props: any) {\n  const [tags, setTags] = useState<TagsProps['tags']>();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [countEdit, setcountEdit] = useState(0);\n  let caseKey = `${getCaseTypeClass(\n    props.casetypeid\n  ).toUpperCase()}%20${props.caseid.toUpperCase()}`;\n  caseKey = caseKey.replace(`-${props.casetypeid.toUpperCase()}%20`, '%20');\n\n  useEffect(() => {\n    if (countEdit === 0 && !isLoaded) {\n      fetchData('cases', `${caseKey}/tags`).then(response => {\n        const caseTags = response.tagsList;\n        props.utilityCtx('Tags', {\n          iconName: 'tag',\n          count: caseTags.length\n        });\n        setTags(caseTags);\n        setIsLoaded(true);\n      });\n    }\n  }, [caseKey, countEdit, isLoaded, props]);\n\n  const handleEditTags = (selectedTags: any[]) => {\n    return new Promise<void>(resolve => {\n      const tagsMap: any = {};\n      if (tags) {\n        tags.forEach((item: any) => {\n          tagsMap[item.tagName] = item.tagKey;\n        });\n      }\n      const newTags: any = [];\n      const updatedTags = selectedTags.map(tag => {\n        if (tag.newTag) {\n          newTags.push({ Name: tag.text });\n        } else {\n          delete tagsMap[tag.text];\n        }\n        return tag.text;\n      });\n      let numReq = 0;\n      for (const [, value] of Object.entries(tagsMap)) {\n        numReq++;\n        sendData('cases', `${caseKey}/tags/${value}`, '', 'DELETE').then(() => {\n          setcountEdit(prevCount => prevCount - 1);\n        });\n      }\n      if (newTags.length > 0) {\n        numReq++;\n        sendData('cases', `${caseKey}/tags`, JSON.stringify({ tags: newTags })).then(() => {\n          setcountEdit(prevCount => prevCount - 1);\n        });\n      }\n      props.utilityCtx('Tags', {\n        iconName: 'tag',\n        count: updatedTags.length\n      });\n      setTags(updatedTags);\n      setcountEdit(numReq);\n      setIsLoaded(false);\n      resolve();\n    });\n  };\n\n  return (\n    <CosmosTags\n      tags={\n        tags\n          ? tags.map((item: any) => {\n              return item.tagName ?? item;\n            })\n          : []\n      }\n      availableTags={[]}\n      loading={!tags}\n      onEditTags={handleEditTags}\n      onSearch={(query: string) => {}}\n    />\n  );\n}\n"],"sourceRoot":""}