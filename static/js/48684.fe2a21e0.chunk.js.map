{"version":3,"file":"static/js/48684.fe2a21e0.chunk.js","mappings":"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","sources":["../node_modules/@pega/cosmos-react-core/src/components/TextArea/TextArea.styles.ts","../node_modules/@pega/cosmos-react-core/src/components/TextArea/TextArea.tsx","fields/TextArea.tsx","../node_modules/@pega/cosmos-react-core/src/hooks/useAutoResize.ts"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\n\nconst StyledTextArea = styled.textarea<{ resizable: boolean }>(({ resizable }) => {\n  return css`\n    width: 100%;\n    min-height: ${props => props.theme.components['text-area']['min-height']};\n    padding: ${props => props.theme.components['text-area'].padding};\n    ${!resizable &&\n    css`\n      resize: none;\n    `}\n  `;\n});\n\nStyledTextArea.defaultProps = defaultThemeProp;\n\nexport default StyledTextArea;\n","import {\n  FC,\n  Ref,\n  forwardRef,\n  PropsWithoutRef,\n  ChangeEvent,\n  useCallback,\n  useState,\n  ChangeEventHandler,\n  useEffect\n} from 'react';\n\nimport { ForwardProps, NoChildrenProp } from '../../types';\nimport FormField from '../FormField';\nimport { FormControlProps, StyledFormControl } from '../FormControl';\nimport { hasProp } from '../../utils';\nimport { useAutoResize, useConsolidatedRef, useI18n, useUID } from '../../hooks';\nimport Text from '../Text';\n\nimport StyledTextArea from './TextArea.styles';\n\nexport interface TextAreaProps extends FormControlProps, NoChildrenProp {\n  /** Minimum length of characters that can be input. */\n  minLength?: number;\n  /** Maximum length of characters that can be input. */\n  maxLength?: number;\n  /**\n   * Allows the user to resize the Text Area.\n   * @default false\n   */\n  resizable?: boolean;\n  /**\n   * Enables the Text Area to resize itself automatically.\n   * @default false\n   */\n  autoResize?: boolean;\n  /**\n   * Display a live character count in relation to the maxLength.\n   * @default false\n   */\n  displayCharCount?: boolean;\n  /**\n   * Allow or disallow a value beyond the maxLength.\n   * @default true\n   */\n  hardStop?: boolean;\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>;\n}\n\nconst TextArea: FC<TextAreaProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<TextAreaProps>, ref: Ref<HTMLTextAreaElement>) => {\n    const uid = useUID();\n    const {\n      id = uid,\n      value,\n      defaultValue,\n      required = false,\n      disabled = false,\n      label,\n      labelHidden,\n      info,\n      status,\n      resizable = false,\n      autoResize = false,\n      maxLength,\n      displayCharCount = false,\n      hardStop = true,\n      onChange: onChangeProp,\n      ...restProps\n    } = props;\n\n    const t = useI18n();\n\n    const [textAreaRef, resizeTextArea] = useAutoResize<HTMLTextAreaElement>(undefined, 100);\n    const consolidatedRef = useConsolidatedRef(textAreaRef, ref);\n    const [charCount, setCharCount] = useState(0);\n\n    const controlProp: {\n      value?: string;\n      defaultValue?: string;\n    } = {};\n\n    useEffect(() => {\n      if (hasProp(props, 'value')) {\n        setCharCount(props.value ? props.value.length : 0);\n      } else if (hasProp(props, 'defaultValue')) {\n        setCharCount(props.defaultValue ? props.defaultValue.length : 0);\n      }\n    }, [props]);\n\n    // Conditionally render component as controlled/uncontrolled\n    if (hasProp(props, 'value')) {\n      controlProp.value = value ?? '';\n    } else if (hasProp(props, 'defaultValue')) {\n      controlProp.defaultValue = defaultValue ?? '';\n    }\n\n    const onChange = useCallback(\n      (e: ChangeEvent<HTMLTextAreaElement>) => {\n        if (!hardStop || maxLength === undefined || e.target.value.length <= maxLength) {\n          onChangeProp?.(e);\n          setCharCount(e.target.value.length);\n          resizeTextArea();\n        }\n      },\n      [onChangeProp, resizeTextArea, hardStop, maxLength]\n    );\n\n    const Comp = (\n      <StyledFormControl\n        {...{\n          ref: autoResize ? consolidatedRef : ref,\n          id,\n          required,\n          disabled,\n          status,\n          resizable,\n          maxLength: hardStop ? maxLength : undefined,\n          ...controlProp,\n          ...restProps,\n          onChange,\n          as: StyledTextArea\n        }}\n      />\n    );\n\n    return label || displayCharCount ? (\n      <FormField\n        {...{\n          label,\n          labelHidden,\n          id,\n          info,\n          status,\n          charLimitDisplay:\n            displayCharCount && typeof maxLength === 'number' ? (\n              <Text\n                variant='secondary'\n                aria-live={maxLength >= 0 && maxLength - charCount <= 20 ? 'polite' : 'off'}\n              >\n                {maxLength >= 0 ? t('x_of_y', [charCount || '0', maxLength]) : charCount}\n              </Text>\n            ) : undefined,\n          required,\n          disabled\n        }}\n      >\n        {Comp}\n      </FormField>\n    ) : (\n      Comp\n    );\n  }\n);\n\nexport default TextArea;\n","import { ChangeEvent, useState } from 'react';\nimport { TextArea as TextAreaCosmos } from '@pega/cosmos-react-core';\n\nexport default function InputField(props: any) {\n  const { field } = props;\n  const [inputValue, setInputValue] = useState(field.displayvalue);\n  return (\n    <TextAreaCosmos\n      type='text'\n      label={field.displaylabel}\n      value={inputValue}\n      onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {\n        setInputValue(e.target.value);\n      }}\n    />\n  );\n}\n","import { useRef, useState, RefObject } from 'react';\n\nimport { debounce } from '../utils';\n\n/**\n * @example const [ref, resizeFunction] = useAutoResize();\n * maxHeight should be provided in pixels without units\n * minHeight should be provided in pixels without units\n * @returns * ref:: A reference for the element that the resize functionality should be applied to. [React RefObject](https://reactjs.org/docs/refs-and-the-dom.html)\n *          * resizeFunction:: The function to call to automatically resize the element.\n * element refers to auto resizable element\n */\nconst useAutoResize = <T extends HTMLElement = HTMLElement>(\n  maxHeight?: number,\n  minHeightProp?: number\n): [RefObject<T>, () => void] => {\n  const element = useRef<T>(null);\n\n  const [minHeight, setMinHeight] = useState(minHeightProp || 0);\n\n  const autoResize = () => {\n    if (element.current) {\n      let newMinHeight = minHeight;\n      if (!minHeight) {\n        newMinHeight = element.current.scrollHeight;\n        setMinHeight(newMinHeight);\n      }\n      // Reset the heights to the base height so there is an overflow / or none to calculate the new height\n      element.current.style.height = `${newMinHeight}px`;\n\n      if (maxHeight) {\n        element.current.style.overflowY =\n          element.current.scrollHeight > maxHeight ? 'auto' : 'hidden';\n        element.current.style.height = `${Math.min(element.current.scrollHeight, maxHeight)}px`;\n      } else {\n        element.current.style.height = `${element.current.scrollHeight}px`;\n      }\n    }\n  };\n\n  const debouncedAutoResize = debounce(autoResize, 100);\n\n  return [element, debouncedAutoResize];\n};\n\nexport default useAutoResize;\n"],"names":["StyledTextArea","resizable","props","theme","components","padding","defaultProps","forwardRef","ref","uid","useUID","id","value","defaultValue","required","disabled","label","labelHidden","info","status","autoResize","maxLength","displayCharCount","hardStop","onChangeProp","onChange","restProps","t","useI18n","useAutoResize","undefined","textAreaRef","resizeTextArea","consolidatedRef","useConsolidatedRef","useState","charCount","setCharCount","controlProp","useEffect","length","useCallback","e","target","Comp","as","FormField","charLimitDisplay","Text","variant","InputField","field","displayvalue","inputValue","setInputValue","type","displaylabel","maxHeight","minHeightProp","element","useRef","minHeight","setMinHeight","debouncedAutoResize","current","newMinHeight","scrollHeight","style","height","overflowY","Math","min"],"sourceRoot":""}