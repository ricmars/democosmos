{"version":3,"sources":["utils/datetime.tsx","components/Pulse.tsx"],"names":["unitsInMs","year","month","day","hour","minute","second","getRelativeTime","date","elapsed","getTime","Date","now","Math","abs","unit","Object","keys","find","u","Intl","RelativeTimeFormat","window","config","locale","replace","style","numeric","format","round","Pulse","useState","posts","setpost","isLoaded","setPulseIsLoaded","useEffect","fetchData","then","response","data","FeedList","pxResults","catch","error","console","log","renderReplies","item","length","map","reply","FeedReply","id","pzInsKey","content","pyMessage","info","fullname","postedByUser","name","fullnameLabel","username","ID","avatarSrc","getDataUrl","userImage","timeElapsed","pxCreateDateTime","interactionInfo","likeLabel","likeCount","pyLikes","pxLikeCount","commentLabel","onLikeClick","onCommentClick","Feed","searchTypes","userInfo","getOperatorName","getOperatorUrl","FeedNewPost","textAreaPlaceholder","postLabel","onFilesAdded","onPost","FeedPost","postContext","context","pxContextType","Link","href","pyContext","split","previewable","target","pyContextDescription","pyFeed","pyPostedOn","replies","attachments","maxContentHeight","onUserClick","actions","text","onClick","replyInput","onSubmit","placeholder","Card","alignItems","padding","Progress","placement","message"],"mappings":"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","file":"static/js/7.f5b8f556.chunk.js","sourcesContent":["const unitsInMs = {\n  year: 24 * 60 * 60 * 1000 * 365,\n  month: (24 * 60 * 60 * 1000 * 365) / 12,\n  day: 24 * 60 * 60 * 1000,\n  hour: 60 * 60 * 1000,\n  minute: 60 * 1000,\n  second: 1000\n};\n\ntype TimeUnit = keyof typeof unitsInMs;\n\nexport const getRelativeTime = (date: Date) => {\n  let elapsed = date.getTime() - Date.now();\n  // Deliberately reduce precision to 1 minute\n  if (Math.abs(elapsed) < 60000) elapsed = 0;\n  const unit = (Object.keys(unitsInMs).find(u => Math.abs(elapsed) >= unitsInMs[u as TimeUnit]) ||\n    'second') as TimeUnit;\n  return new Intl.RelativeTimeFormat(\n    (window as any).config && (window as any).config.locale\n      ? (window as any).config.locale.replace('_', '-')\n      : 'en',\n    {\n      style: 'long',\n      numeric: 'auto'\n    }\n  ).format(Math.round(elapsed / unitsInMs[unit]), unit);\n};\n","import { useState, useEffect } from 'react';\nimport { fetchData } from '../services';\nimport { Card, Link, Progress } from '@pega/cosmos-react-core';\nimport { Feed, FeedNewPost, FeedPost, FeedReply } from '@pega/cosmos-react-social';\nimport { getRelativeTime } from '../utils/datetime';\nimport { getOperatorName, getOperatorUrl } from '../utils/env';\nimport { getDataUrl } from '../services';\n\nexport default function Pulse() {\n  const [posts, setpost] = useState([]);\n  const [isLoaded, setPulseIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetchData(\n      'feed',\n      'filterFor=DATA-PORTAL%20$DemoReact&feedClass=@baseclass&filterBy=&pageSize=9&olderThan='\n    )\n      .then(response => {\n        if (response.data !== null && response.data.FeedList && response.data.FeedList.pxResults) {\n          setpost(response.data.FeedList.pxResults);\n        }\n        setPulseIsLoaded(true);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n\n  const renderContent = (context: any) => {\n    if (context.pxContextType === 'case') {\n      return (\n        <Link href={`/case/${context.pyContext.split(' ')[1]}`} previewable target='_blank'>\n          {context.pyContextDescription}\n        </Link>\n      );\n    }\n    return context.pyContextDescription;\n  };\n\n  const renderReplies = (item: any) => {\n    if (item.pxResults && item.pxResults.length > 0) {\n      return item.pxResults.map((reply: any) => (\n        <FeedReply\n          id={reply.pzInsKey}\n          key={reply.pzInsKey}\n          content={reply.pyMessage}\n          info={{\n            fullname: reply.postedByUser.name,\n            fullnameLabel: reply.postedByUser.name,\n            username: reply.postedByUser.ID,\n            avatarSrc: getDataUrl('operatorimage', reply.postedByUser.userImage),\n            content: reply.pyMessage,\n            timeElapsed: getRelativeTime(new Date(reply.pxCreateDateTime))\n          }}\n          interactionInfo={{\n            likeLabel: 'Like',\n            likeCount: reply.pyLikes.pxLikeCount,\n            commentLabel: 'Comment'\n          }}\n          onLikeClick={() => {}}\n          onCommentClick={() => {}}\n        />\n      ));\n    }\n    return null;\n  };\n\n  return (\n    <Feed\n      searchTypes={['user', 'case']}\n      userInfo={{\n        username: getOperatorName(),\n        fullname: getOperatorName(),\n        avatarSrc: getDataUrl('operatorimage', getOperatorUrl())\n      }}\n    >\n      <FeedNewPost\n        id='newpost'\n        interactionInfo={{\n          textAreaPlaceholder: 'Start a conversation',\n          postLabel: 'Post'\n        }}\n        onFilesAdded={() => {}}\n        onPost={() => {}}\n      />\n      {!isLoaded ? (\n        <Card style={{ alignItems: 'center', padding: '2rem 0' }}>\n          <Progress placement='inline' aria-label='Loading feed' message='' />\n        </Card>\n      ) : (\n        posts.map((item: any) => (\n          <FeedPost\n            id={item.pzInsKey}\n            key={item.pzInsKey}\n            info={{\n              fullname: item.postedByUser.name,\n              username: item.postedByUser.ID,\n              avatarSrc: getDataUrl('operatorimage', item.postedByUser.userImage),\n              content: item.pyMessage,\n              postContext: renderContent(item),\n              timeElapsed: getRelativeTime(new Date(item.pyFeed.pyPostedOn))\n            }}\n            interactionInfo={{\n              likeLabel: 'Like',\n              likeCount: item.pyLikes.pxLikeCount,\n              commentLabel: 'Comment'\n            }}\n            replies={renderReplies(item)}\n            attachments={[]}\n            maxContentHeight={80}\n            onLikeClick={() => {}}\n            onUserClick={() => {}}\n            actions={[{ text: 'Bookmark', id: 'Bookmark', onClick: () => {} }]}\n            replyInput={{\n              commentLabel: 'Send Comment',\n              attachments: [],\n              onFilesAdded: () => {},\n              onSubmit: () => {},\n              placeholder: 'Add a comment'\n            }}\n          />\n        ))\n      )}\n    </Feed>\n  );\n}\n"],"sourceRoot":""}