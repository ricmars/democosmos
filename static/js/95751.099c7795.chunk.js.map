{"version":3,"file":"static/js/95751.099c7795.chunk.js","mappings":"kQAOe,SAASA,EAAKC,GAC3B,IAAAC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GACdG,GAD0BH,EAAA,IACFD,EAAAA,EAAAA,aAAyCK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAApDE,GAAFD,EAAA,GAASA,EAAA,IAEdE,EAAyD,CAC7D,CACEC,KAAK,QACLC,YAAY,kCAEd,CACED,KAAK,QACLC,YAAY,mCAIVC,EAAU,SAACC,GACf,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACL,KAAI,eAAAM,OAAiBH,EAAKA,MAAOI,UAC3CC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,UAAW,CAAEC,KAAM,UAAWC,IAAK,GAAIL,SAAA,EAC3CH,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACC,MAAM,aAAaC,UAAQ,KAClCX,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACC,MAAM,YAAYC,UAAQ,KACjCX,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACG,KAAK,QAAQF,MAAM,QAAQC,UAAQ,KAC1CX,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACC,MAAM,kBAIrB,EAEIG,EAAO,GAAAX,QAAMY,EAAAA,EAAAA,IACf5B,EAAM6B,YACNC,cAAa,OAAAd,OAAMhB,EAAM+B,OAAOD,eAClCH,EAAUA,EAAQK,QAAQ,IAADhB,OAAKhB,EAAM6B,WAAWC,eAAiB,IAEhE,IAAMG,GAAaC,EAAAA,EAAAA,cAAY,SAACC,GAC9B,OAAOA,EAAMC,KAAI,SAACC,GAChB,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKD,GAAW,IACdE,OAAQ,WAAO,EACfC,SAAU,WAAO,GAErB,GACF,GAAG,IAEGC,GAAkCC,EAAAA,EAAAA,UAAQ,WAC9C,MAAO,CACLjC,MAAAA,EACAkC,iBAAaC,EACbC,SAAUjC,EACVkC,SAAU,WACR,EAEFC,UAAW,WACT,EAGN,GAAG,IAEGC,GAAwCN,EAAAA,EAAAA,UAAQ,WACpD,MAAO,CACLP,MAAOF,EAAW,IAClBgB,SAAU,WAAO,EAErB,GAAG,IAEH,OACEnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAkB,CACjB7C,QAASA,EACT8B,MAAO,GACPgB,MAAO,EACPC,SAAU,WACR5C,EAAQ,MACV,EACAiC,KAAMA,EACNY,UAAW,WACT7C,EAAQ,UACV,EACAwC,QAASA,EACTM,kBAAmB,WACjB9C,OAAQoC,EACV,GAGN,C","sources":["components/Stakeholders.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useState, useMemo, useCallback } from 'react';\nimport { FieldGroup, Grid, Input } from '@pega/cosmos-react-core';\nimport { Stakeholders as CosmosStakeholders, StakeholdersProps } from '@pega/cosmos-react-work';\nimport { getCaseTypeClass } from '../utils/env';\n\nexport default function Tags(props: any) {\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState<undefined | 'add' | 'viewAll'>();\n\n  const roles: NonNullable<StakeholdersProps['form']>['roles'] = [\n    {\n      name: `role1`,\n      description: `This is a description of role1`\n    },\n    {\n      name: `role2`,\n      description: `This is a description of role2`\n    }\n  ];\n\n  const AddForm = (role: any) => {\n    return (\n      <FieldGroup name={`Fields for: ${role.role}`}>\n        <Grid container={{ cols: '1fr 1fr', gap: 2 }}>\n          <Input label='First name' required />\n          <Input label='Last name' required />\n          <Input type='email' label='Email' required />\n          <Input label='Job title' />\n        </Grid>\n      </FieldGroup>\n    );\n  };\n\n  let caseKey = `${getCaseTypeClass(\n    props.casetypeid\n  ).toUpperCase()}%20${props.caseid.toUpperCase()}`;\n  caseKey = caseKey.replace(`-${props.casetypeid.toUpperCase()}`, '');\n\n  const addActions = useCallback((items: any) => {\n    return items.map((stakeholder: any) => {\n      return {\n        ...stakeholder,\n        onEdit: () => {},\n        onRemove: () => {}\n      };\n    });\n  }, []);\n\n  const form: StakeholdersProps['form'] = useMemo(() => {\n    return {\n      roles,\n      currentRole: undefined,\n      renderer: AddForm,\n      onSubmit: () => {\n        // Create the resource. We may want to present the modal in a loading state. That will come from Modal in an additional PR.\n      },\n      onDismiss: () => {\n        // Perhaps some state cleanup is necessary.\n      }\n    };\n  }, []);\n\n  const viewAll: StakeholdersProps['viewAll'] = useMemo(() => {\n    return {\n      items: addActions([]),\n      onSearch: () => {}\n    };\n  }, []);\n\n  return (\n    <CosmosStakeholders\n      loading={loading}\n      items={[]}\n      count={0}\n      onAddNew={() => {\n        setMode('add');\n      }}\n      form={form}\n      onViewAll={() => {\n        setMode('viewAll');\n      }}\n      viewAll={viewAll}\n      onAfterModalClose={() => {\n        setMode(undefined);\n      }}\n    />\n  );\n}\n"],"names":["Tags","props","_useState","useState","_useState2","_slicedToArray","loading","_useState3","_useState4","setMode","roles","name","description","AddForm","role","_jsx","FieldGroup","concat","children","_jsxs","Grid","container","cols","gap","Input","label","required","type","caseKey","getCaseTypeClass","casetypeid","toUpperCase","caseid","replace","addActions","useCallback","items","map","stakeholder","_objectSpread","onEdit","onRemove","form","useMemo","currentRole","undefined","renderer","onSubmit","onDismiss","viewAll","onSearch","CosmosStakeholders","count","onAddNew","onViewAll","onAfterModalClose"],"sourceRoot":""}