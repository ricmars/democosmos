{"version":3,"sources":["components/Worklist.tsx"],"names":["Worklist","history","useNavigate","useState","isLimited","setIsLimited","page","window","portal","uiResources","context_data","pyPortal","summary_of_lists__","D_pyMyWorkList","pxResults","replace","tasklist","data","headerText","count","length","items","filter","item","i","map","pyID","pxRefObjectKey","split","path","getCaseTypeName","pxRefObjectClass","name","pxTaskLabel","meta","variant","href","onClick","e","state","token","config","preventDefault","stopPropagation","openCaseType","pyLabel","genStatus","pyAssignmentStatus","pxUrgencyAssign","actions","content","headerVisual","size","getOperatorName","imageSrc","getDataUrl","getOperatorUrl","emptyPlaceholder","onExpandToggle","cur"],"mappings":"iRAQe,SAASA,IACtB,IAAMC,EAAUC,cAChB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EACJC,OACAC,OAAOC,YAAYC,aAAaC,SAASC,mBAAmBC,eAAeC,UAAUC,QACrF,aACA,IAEEC,EAAkB,GACjBT,OAAeC,OAAOS,KAAKX,GAAMQ,YACpCE,EAAYT,OAAeC,OAAOS,KAAKX,GAAMQ,WA6D/C,OACE,cAAC,IAAD,CACEI,WAAW,cACXC,MAAOH,EAASI,OAChBC,MA/CKL,EACJM,QAAO,SAACC,EAAMC,GACb,OAAQpB,GAAaoB,EAAI,KAE1BC,KAAI,SAACF,EAAMC,GACV,IAAME,EAAOH,EAAKI,eAAeC,MAAM,KAAK,GACtCC,EAAI,gBAAYC,YAAgBP,EAAKQ,kBAAjC,YAAsDL,GAChE,MAAO,CACLM,KAAMT,EAAKU,YACXC,KACE,cAAC,IAAD,CACEb,MAAO,CACL,eAAC,IAAD,CAAMc,QAAQ,YAAd,oBACU,IACR,eAAC,IAAD,CACEC,KAAMP,EACNQ,QAAS,SAACC,IA/BP,SAACT,EAAcS,GAClCrC,EAAQ4B,EAAM,CACZU,MAAO,CACLC,MAAQjC,OAAeiC,MACvBhC,OAASD,OAAeC,OACxBiC,OAASlC,OAAekC,UAG5BH,EAAEI,iBACFJ,EAAEK,kBAuBgBC,CAAaf,EAAMS,IAHvB,UAMGf,EAAKsB,QANR,IAMkBnB,QAGpBoB,YAAUvB,EAAKwB,oBACf,eAAC,IAAD,CAAMZ,QAAQ,YAAd,qBAAmCZ,EAAKyB,sBAI9CC,QACE,cAAC,IAAD,CACEd,QAAQ,UACRE,QAAS,aAFX,gBASFa,QAAS,SAUbC,aACE,cAAC,IAAD,CACEC,KAAK,IACLpB,KAAMqB,cACNC,SAAUC,YAAW,gBAAiBC,iBAG1CC,iBAAkB,cAAC,IAAD,IAClBC,eAAgB,WACdrD,GAAa,SAAAsD,GAAG,OAAKA","file":"static/js/11.564a4614.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Tasks } from '@pega/cosmos-react-work';\nimport { Button, Avatar, EmptyState, Text, MetaList, Link } from '@pega/cosmos-react-core';\nimport { getOperatorName, getOperatorUrl, getCaseTypeName } from '../utils/env';\nimport { getDataUrl } from '../services';\nimport { genStatus } from '../utils/status';\n\nexport default function Worklist() {\n  const history = useNavigate();\n  const [isLimited, setIsLimited] = useState(true);\n\n  const page = (\n    window as any\n  ).portal.uiResources.context_data.pyPortal.summary_of_lists__.D_pyMyWorkList.pxResults.replace(\n    '.pxResults',\n    ''\n  );\n  let tasklist: any[] = [];\n  if ((window as any).portal.data[page].pxResults) {\n    tasklist = (window as any).portal.data[page].pxResults;\n  }\n\n  const openCaseType = (path: string, e: React.FormEvent<HTMLFormElement>) => {\n    history(path, {\n      state: {\n        token: (window as any).token,\n        portal: (window as any).portal,\n        config: (window as any).config\n      }\n    });\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const openAssignment = () => {};\n\n  const renderTasklist = () => {\n    return tasklist\n      .filter((item, i) => {\n        return !isLimited || i < 3;\n      })\n      .map((item, i) => {\n        const pyID = item.pxRefObjectKey.split(' ')[1];\n        const path = `/case/${getCaseTypeName(item.pxRefObjectClass)}/${pyID}`;\n        return {\n          name: item.pxTaskLabel,\n          meta: (\n            <MetaList\n              items={[\n                <Text variant='secondary'>\n                  Task in{' '}\n                  <Link\n                    href={path}\n                    onClick={(e: React.FormEvent<HTMLFormElement>) => {\n                      openCaseType(path, e);\n                    }}\n                  >\n                    {item.pyLabel} {pyID}\n                  </Link>\n                </Text>,\n                genStatus(item.pyAssignmentStatus),\n                <Text variant='secondary'>Urgency {item.pxUrgencyAssign}</Text>\n              ]}\n            />\n          ),\n          actions: (\n            <Button\n              variant='primary'\n              onClick={() => {\n                openAssignment();\n              }}\n            >\n              Go\n            </Button>\n          ),\n          content: null\n        };\n      });\n  };\n\n  return (\n    <Tasks\n      headerText='My Worklist'\n      count={tasklist.length}\n      items={renderTasklist()}\n      headerVisual={\n        <Avatar\n          size='l'\n          name={getOperatorName()}\n          imageSrc={getDataUrl('operatorimage', getOperatorUrl())}\n        />\n      }\n      emptyPlaceholder={<EmptyState />}\n      onExpandToggle={() => {\n        setIsLimited(cur => !cur);\n      }}\n    />\n  );\n}\n"],"sourceRoot":""}