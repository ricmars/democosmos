{"version":3,"file":"static/js/89156.af90652c.chunk.js","mappings":"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","sources":["utils/datetime.tsx","components/Pulse.tsx"],"sourcesContent":["const unitsInMs = {\n  year: 24 * 60 * 60 * 1000 * 365,\n  month: (24 * 60 * 60 * 1000 * 365) / 12,\n  day: 24 * 60 * 60 * 1000,\n  hour: 60 * 60 * 1000,\n  minute: 60 * 1000,\n  second: 1000\n};\n\ntype TimeUnit = keyof typeof unitsInMs;\n\nexport const getRelativeTime = (date: Date) => {\n  let elapsed = date.getTime() - Date.now();\n  // Deliberately reduce precision to 1 minute\n  if (Math.abs(elapsed) < 60000) elapsed = 0;\n  const unit = (Object.keys(unitsInMs).find(u => Math.abs(elapsed) >= unitsInMs[u as TimeUnit]) ||\n    'second') as TimeUnit;\n  return new Intl.RelativeTimeFormat(\n    (window as any).config && (window as any).config.locale\n      ? (window as any).config.locale.replace('_', '-')\n      : 'en',\n    {\n      style: 'long',\n      numeric: 'auto'\n    }\n  ).format(Math.round(elapsed / unitsInMs[unit]), unit);\n};\n","import { useState, useEffect } from 'react';\nimport { fetchData } from '../services';\nimport { Link } from '@pega/cosmos-react-core';\nimport { Feed, FeedNewPost, FeedPost, FeedReply } from '@pega/cosmos-react-social';\nimport { getRelativeTime } from '../utils/datetime';\nimport { getOperatorName, getOperatorUrl } from '../utils/env';\nimport { getDataUrl } from '../services';\n\nexport default function Pulse() {\n  const [posts, setpost] = useState([]);\n  const [, setPulseIsLoaded] = useState(false);\n\n  useEffect(() => {\n    fetchData(\n      'feed',\n      'filterFor=DATA-PORTAL%20$DemoReact&feedClass=@baseclass&filterBy=&pageSize=9&olderThan='\n    )\n      .then(response => {\n        if (response.data !== null && response.data.FeedList && response.data.FeedList.pxResults) {\n          setpost(response.data.FeedList.pxResults);\n        }\n        setPulseIsLoaded(true);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n\n  const renderContent = (context: any) => {\n    if (context.pxContextType === 'case') {\n      return (\n        <Link href={`/case/${context.pyContext.split(' ')[1]}`} previewable target='_blank'>\n          {context.pyContextDescription}\n        </Link>\n      );\n    }\n    return context.pyContextDescription;\n  };\n\n  const renderReplies = (item: any) => {\n    if (item.pxResults && item.pxResults.length > 0) {\n      return item.pxResults.map((reply: any) => (\n        <FeedReply\n          id={reply.pzInsKey}\n          key={reply.pzInsKey}\n          content={reply.pyMessage}\n          info={{\n            fullname: reply.postedByUser.name,\n            fullnameLabel: reply.postedByUser.name,\n            username: reply.postedByUser.ID,\n            avatarSrc: getDataUrl('operatorimage', reply.postedByUser.userImage),\n            content: reply.pyMessage,\n            timeElapsed: getRelativeTime(new Date(reply.pxCreateDateTime))\n          }}\n          interactionInfo={{\n            likeLabel: 'Like',\n            likeCount: reply.pyLikes.pxLikeCount,\n            commentLabel: 'Comment'\n          }}\n          onLikeClick={() => {}}\n          onCommentClick={() => {}}\n        />\n      ));\n    }\n    return null;\n  };\n\n  return (\n    <Feed\n      searchTypes={['user', 'case']}\n      userInfo={{\n        username: getOperatorName(),\n        fullname: getOperatorName(),\n        avatarSrc: getDataUrl('operatorimage', getOperatorUrl())\n      }}\n      newPostRegion={\n        <FeedNewPost\n          id='newpost'\n          interactionInfo={{\n            textAreaPlaceholder: 'Start a conversation',\n            postLabel: 'Post'\n          }}\n          onFilesAdded={() => {}}\n          onPost={() => {}}\n        />\n      }\n      posts={posts.map((item: any) => (\n        <FeedPost\n          id={item.pzInsKey}\n          key={item.pzInsKey}\n          info={{\n            fullname: item.postedByUser.name,\n            username: item.postedByUser.ID,\n            avatarSrc: getDataUrl('operatorimage', item.postedByUser.userImage),\n            content: item.pyMessage,\n            postContext: renderContent(item),\n            timeElapsed: getRelativeTime(new Date(item.pyFeed.pyPostedOn))\n          }}\n          interactionInfo={{\n            likeLabel: 'Like',\n            likeCount: item.pyLikes.pxLikeCount,\n            commentLabel: 'Comment'\n          }}\n          replies={renderReplies(item)}\n          attachments={[]}\n          maxContentHeight={80}\n          onLikeClick={() => {}}\n          onUserClick={() => {}}\n          actions={[{ text: 'Bookmark', id: 'Bookmark', onClick: () => {} }]}\n          replyInput={{\n            commentLabel: 'Send Comment',\n            attachments: [],\n            onFilesAdded: () => {},\n            onSubmit: () => {},\n            placeholder: 'Add a comment'\n          }}\n        />\n      ))}\n    />\n  );\n}\n"],"names":["unitsInMs","year","month","day","hour","minute","second","getRelativeTime","date","elapsed","getTime","Date","now","Math","abs","unit","Object","keys","find","u","Intl","RelativeTimeFormat","window","config","locale","replace","style","numeric","format","round","Pulse","_useState","useState","_useState2","_slicedToArray","posts","setpost","_useState3","setPulseIsLoaded","useEffect","fetchData","then","response","data","FeedList","pxResults","catch","error","console","log","renderReplies","item","length","map","reply","_jsx","FeedReply","id","pzInsKey","content","pyMessage","info","fullname","postedByUser","name","fullnameLabel","username","ID","avatarSrc","getDataUrl","userImage","timeElapsed","pxCreateDateTime","interactionInfo","likeLabel","likeCount","pyLikes","pxLikeCount","commentLabel","onLikeClick","onCommentClick","Feed","searchTypes","userInfo","getOperatorName","getOperatorUrl","newPostRegion","FeedNewPost","textAreaPlaceholder","postLabel","onFilesAdded","onPost","FeedPost","postContext","context","pxContextType","Link","href","concat","pyContext","split","previewable","target","children","pyContextDescription","pyFeed","pyPostedOn","replies","attachments","maxContentHeight","onUserClick","actions","text","onClick","replyInput","onSubmit","placeholder"],"sourceRoot":""}